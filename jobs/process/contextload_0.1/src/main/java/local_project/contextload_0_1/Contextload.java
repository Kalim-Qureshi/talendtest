// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.contextload_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Contextload Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Contextload implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (Cassandra_Host != null) {

				this.setProperty("Cassandra_Host", Cassandra_Host.toString());

			}

			if (Cassandra_Port != null) {

				this.setProperty("Cassandra_Port", Cassandra_Port.toString());

			}

			if (SF_BI_DW_Username != null) {

				this.setProperty("SF_BI_DW_Username",
						SF_BI_DW_Username.toString());

			}

			if (SF_BI_DW_DatabaseName != null) {

				this.setProperty("SF_BI_DW_DatabaseName",
						SF_BI_DW_DatabaseName.toString());

			}

			if (SF_BI_DW_JDBCUrl != null) {

				this.setProperty("SF_BI_DW_JDBCUrl",
						SF_BI_DW_JDBCUrl.toString());

			}

			if (SF_BI_DW_Password != null) {

				this.setProperty("SF_BI_DW_Password",
						SF_BI_DW_Password.toString());

			}

			if (SF_BI_DW_DriverClass != null) {

				this.setProperty("SF_BI_DW_DriverClass",
						SF_BI_DW_DriverClass.toString());

			}

		}

		public String Cassandra_Host;

		public String getCassandra_Host() {
			return this.Cassandra_Host;
		}

		public Integer Cassandra_Port;

		public Integer getCassandra_Port() {
			return this.Cassandra_Port;
		}

		public String SF_BI_DW_Username;

		public String getSF_BI_DW_Username() {
			return this.SF_BI_DW_Username;
		}

		public String SF_BI_DW_DatabaseName;

		public String getSF_BI_DW_DatabaseName() {
			return this.SF_BI_DW_DatabaseName;
		}

		public String SF_BI_DW_JDBCUrl;

		public String getSF_BI_DW_JDBCUrl() {
			return this.SF_BI_DW_JDBCUrl;
		}

		public java.lang.String SF_BI_DW_Password;

		public java.lang.String getSF_BI_DW_Password() {
			return this.SF_BI_DW_Password;
		}

		public String SF_BI_DW_DriverClass;

		public String getSF_BI_DW_DriverClass() {
			return this.SF_BI_DW_DriverClass;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Contextload";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Contextload.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Contextload.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSystem_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSystem_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSystem_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextDump_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tContextDump_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tContextDump_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputProperties_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSystem_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tContextDump_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Contextload = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Contextload = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Contextload) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSystem_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSystem_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				class BytesLimit65535_tJavaRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_1().limitLog4jByte();

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tSystem_1 begin ] start
				 */

				ok_Hash.put("tSystem_1", false);
				start_Hash.put("tSystem_1", System.currentTimeMillis());

				currentComponent = "tSystem_1";

				int tos_count_tSystem_1 = 0;

				class BytesLimit65535_tSystem_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSystem_1().limitLog4jByte();

				Runtime runtime_tSystem_1 = Runtime.getRuntime();

				String[] env_tSystem_1 = null;
				java.util.Map<String, String> envMap_tSystem_1 = System
						.getenv();
				java.util.Map<String, String> envMapClone_tSystem_1 = new java.util.HashMap();
				envMapClone_tSystem_1.putAll(envMap_tSystem_1);

				final Process ps_tSystem_1 = runtime_tSystem_1.exec(
						"cmd /c echo Hello", env_tSystem_1);

				globalMap.remove("tSystem_1_OUTPUT");
				globalMap.remove("tSystem_1_ERROROUTPUT");

				Thread normal_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tSystem_1.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {

									if (globalMap.get("tSystem_1_OUTPUT") != null) {
										globalMap
												.put("tSystem_1_OUTPUT",
														(String) globalMap
																.get("tSystem_1_OUTPUT")
																+ "\n" + line);
									} else {
										globalMap.put("tSystem_1_OUTPUT", line);
									}
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {

							ioe.printStackTrace();
						}
					}
				};
				normal_tSystem_1.start();

				Thread error_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tSystem_1.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {

									System.err.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {

							ioe.printStackTrace();
						}
					}
				};
				error_tSystem_1.start();
				if (ps_tSystem_1.getOutputStream() != null) {
					ps_tSystem_1.getOutputStream().close();
				}
				ps_tSystem_1.waitFor();
				normal_tSystem_1.join(10000);
				error_tSystem_1.join(10000);

				/**
				 * [tSystem_1 begin ] stop
				 */

				/**
				 * [tSystem_1 main ] start
				 */

				currentComponent = "tSystem_1";

				tos_count_tSystem_1++;

				/**
				 * [tSystem_1 main ] stop
				 */

				/**
				 * [tSystem_1 process_data_begin ] start
				 */

				currentComponent = "tSystem_1";

				/**
				 * [tSystem_1 process_data_begin ] stop
				 */

				/**
				 * [tJavaRow_1 main ] start
				 */

				currentComponent = "tJavaRow_1";

				// row5
				// row5

				if (execStat) {
					runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
				}

				// code sample:
				//
				System.out
						.println(((String) globalMap.get("tSystem_1_OUTPUT")));
				nb_line_tJavaRow_1++;

				tos_count_tJavaRow_1++;

				/**
				 * [tJavaRow_1 main ] stop
				 */

				/**
				 * [tJavaRow_1 process_data_begin ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 process_data_begin ] stop
				 */

				/**
				 * [tJavaRow_1 process_data_end ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 process_data_end ] stop
				 */

				/**
				 * [tSystem_1 process_data_end ] start
				 */

				currentComponent = "tSystem_1";

				/**
				 * [tSystem_1 process_data_end ] stop
				 */

				/**
				 * [tSystem_1 end ] start
				 */

				currentComponent = "tSystem_1";

				globalMap.put("tSystem_1_EXIT_VALUE", ps_tSystem_1.exitValue());

				ok_Hash.put("tSystem_1", true);
				end_Hash.put("tSystem_1", System.currentTimeMillis());

				/**
				 * [tSystem_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputProperties_1Process(globalMap);

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSystem_1 finally ] start
				 */

				currentComponent = "tSystem_1";

				/**
				 * [tSystem_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSystem_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Contextload = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Contextload = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Contextload.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Contextload.length == 0) {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Contextload, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Contextload, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Contextload) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

					this.section = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.section, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append(",section=" + section);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Contextload = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Contextload = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Contextload.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Contextload.length == 0) {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Contextload, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Contextload, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Contextload) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

					this.section = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.section, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append(",section=" + section);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Contextload = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Contextload = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String section;

		public String getSection() {
			return this.section;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Contextload.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Contextload.length == 0) {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Contextload, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Contextload, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Contextload) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

					this.section = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.section, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append(",section=" + section);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				row3Struct row3 = new row3Struct();

				row4Struct row4 = new row4Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tContextLoad_1 = 0;

				class BytesLimit65535_tContextLoad_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tContextLoad_1().limitLog4jByte();
				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tUnite_1 = 0;

				class BytesLimit65535_tUnite_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUnite_1().limitLog4jByte();

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;

				class BytesLimit65535_tFileInputProperties_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputProperties_1().limitLog4jByte();

				java.io.File file_tFileInputProperties_1 = new java.io.File(
						"C:/Users/nirbhay.thakkar/Desktop/GlobalConfigDT.ini");
				int nb_line_tFileInputProperties_1 = 0;
				org.ini4j.Wini ini_tFileInputProperties_1 = new org.ini4j.Wini(
						new java.io.InputStreamReader(
								new java.io.FileInputStream(
										"C:/Users/nirbhay.thakkar/Desktop/GlobalConfigDT.ini"),
								"ISO-8859-15"));
				for (org.ini4j.Profile.Section section_tFileInputProperties_1 : ini_tFileInputProperties_1
						.values()) {
					for (String key_tFileInputProperties_1 : section_tFileInputProperties_1
							.keySet()) {
						nb_line_tFileInputProperties_1++;
						row2.key = key_tFileInputProperties_1;
						row2.value = section_tFileInputProperties_1
								.get(key_tFileInputProperties_1);
						row2.section = section_tFileInputProperties_1.getName();

						/**
						 * [tFileInputProperties_1 begin ] stop
						 */

						/**
						 * [tFileInputProperties_1 main ] start
						 */

						currentComponent = "tFileInputProperties_1";

						tos_count_tFileInputProperties_1++;

						/**
						 * [tFileInputProperties_1 main ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_begin ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// row3
						// row2

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						// ////////

						// for output
						row4 = new row4Struct();

						row4.key = row2.key;
						row4.value = row2.value;
						row4.section = row2.section;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tUnite_1 process_data_begin ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 main ] start
						 */

						currentComponent = "tContextLoad_1";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// ////////////////////////
						String tmp_key_tContextLoad_1 = null;
						String key_tContextLoad_1 = null;
						if (row4.key != null) {
							tmp_key_tContextLoad_1 = row4.key.trim();
							if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
									.startsWith("!"))) {
								tmp_key_tContextLoad_1 = null;
							} else {
								row4.key = tmp_key_tContextLoad_1;
							}
						}
						if (row4.key != null) {
							key_tContextLoad_1 = row4.key;
						}
						String value_tContextLoad_1 = null;
						if (row4.value != null) {
							value_tContextLoad_1 = row4.value;
						}

						String currentValue_tContextLoad_1 = value_tContextLoad_1;

						if ("SF_BI_DW_Password".equals(key_tContextLoad_1))
							currentValue_tContextLoad_1 = currentValue_tContextLoad_1
									.replaceAll(".", "*");

						if (tmp_key_tContextLoad_1 != null) {
							try {
								if (key_tContextLoad_1 != null
										&& "Cassandra_Host"
												.equals(key_tContextLoad_1)) {
									context.Cassandra_Host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "Cassandra_Port"
												.equals(key_tContextLoad_1)) {

									context.Cassandra_Port = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_Username"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_Username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_DatabaseName"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_DatabaseName = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_JDBCUrl"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_JDBCUrl = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_Password"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_Password = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_DriverClass"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_DriverClass = value_tContextLoad_1;
								}

								if (context.getProperty(key_tContextLoad_1) != null) {
									assignList_tContextLoad_1
											.add(key_tContextLoad_1);
								} else {
									newPropertyList_tContextLoad_1
											.add(key_tContextLoad_1);
								}
								if (value_tContextLoad_1 == null) {
									context.setProperty(key_tContextLoad_1, "");
								} else {
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_1
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_1++;
						}
						// ////////////////////////

						tos_count_tContextLoad_1++;

						/**
						 * [tContextLoad_1 main ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_begin ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_end ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_end ] stop
						 */

						/**
						 * [tUnite_1 process_data_end ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_end ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 end ] start
						 */

						currentComponent = "tFileInputProperties_1";

					}
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						nb_line_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tFileInputProperties_2 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_2", false);
				start_Hash.put("tFileInputProperties_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputProperties_2";

				int tos_count_tFileInputProperties_2 = 0;

				class BytesLimit65535_tFileInputProperties_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputProperties_2().limitLog4jByte();

				java.io.File file_tFileInputProperties_2 = new java.io.File(
						"C:/Users/nirbhay.thakkar/Desktop/GlobalParamDT.ini");
				int nb_line_tFileInputProperties_2 = 0;
				org.ini4j.Wini ini_tFileInputProperties_2 = new org.ini4j.Wini(
						new java.io.InputStreamReader(
								new java.io.FileInputStream(
										"C:/Users/nirbhay.thakkar/Desktop/GlobalParamDT.ini"),
								"ISO-8859-15"));
				for (org.ini4j.Profile.Section section_tFileInputProperties_2 : ini_tFileInputProperties_2
						.values()) {
					for (String key_tFileInputProperties_2 : section_tFileInputProperties_2
							.keySet()) {
						nb_line_tFileInputProperties_2++;
						row3.key = key_tFileInputProperties_2;
						row3.value = section_tFileInputProperties_2
								.get(key_tFileInputProperties_2);
						row3.section = section_tFileInputProperties_2.getName();

						/**
						 * [tFileInputProperties_2 begin ] stop
						 */

						/**
						 * [tFileInputProperties_2 main ] start
						 */

						currentComponent = "tFileInputProperties_2";

						tos_count_tFileInputProperties_2++;

						/**
						 * [tFileInputProperties_2 main ] stop
						 */

						/**
						 * [tFileInputProperties_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputProperties_2";

						/**
						 * [tFileInputProperties_2 process_data_begin ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// row2
						// row3

						// ////////

						// for output
						row4 = new row4Struct();

						row4.key = row3.key;
						row4.value = row3.value;
						row4.section = row3.section;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tUnite_1 process_data_begin ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 main ] start
						 */

						currentComponent = "tContextLoad_1";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// ////////////////////////
						String tmp_key_tContextLoad_1 = null;
						String key_tContextLoad_1 = null;
						if (row4.key != null) {
							tmp_key_tContextLoad_1 = row4.key.trim();
							if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
									.startsWith("!"))) {
								tmp_key_tContextLoad_1 = null;
							} else {
								row4.key = tmp_key_tContextLoad_1;
							}
						}
						if (row4.key != null) {
							key_tContextLoad_1 = row4.key;
						}
						String value_tContextLoad_1 = null;
						if (row4.value != null) {
							value_tContextLoad_1 = row4.value;
						}

						String currentValue_tContextLoad_1 = value_tContextLoad_1;

						if ("SF_BI_DW_Password".equals(key_tContextLoad_1))
							currentValue_tContextLoad_1 = currentValue_tContextLoad_1
									.replaceAll(".", "*");

						if (tmp_key_tContextLoad_1 != null) {
							try {
								if (key_tContextLoad_1 != null
										&& "Cassandra_Host"
												.equals(key_tContextLoad_1)) {
									context.Cassandra_Host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "Cassandra_Port"
												.equals(key_tContextLoad_1)) {

									context.Cassandra_Port = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_Username"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_Username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_DatabaseName"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_DatabaseName = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_JDBCUrl"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_JDBCUrl = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_Password"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_Password = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SF_BI_DW_DriverClass"
												.equals(key_tContextLoad_1)) {
									context.SF_BI_DW_DriverClass = value_tContextLoad_1;
								}

								if (context.getProperty(key_tContextLoad_1) != null) {
									assignList_tContextLoad_1
											.add(key_tContextLoad_1);
								} else {
									newPropertyList_tContextLoad_1
											.add(key_tContextLoad_1);
								}
								if (value_tContextLoad_1 == null) {
									context.setProperty(key_tContextLoad_1, "");
								} else {
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_1
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_1++;
						}
						// ////////////////////////

						tos_count_tContextLoad_1++;

						/**
						 * [tContextLoad_1 main ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_begin ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_end ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_end ] stop
						 */

						/**
						 * [tUnite_1 process_data_end ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_2 process_data_end ] start
						 */

						currentComponent = "tFileInputProperties_2";

						/**
						 * [tFileInputProperties_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_2 end ] start
						 */

						currentComponent = "tFileInputProperties_2";

					}
				}
				globalMap.put("tFileInputProperties_2_NB_LINE",
						nb_line_tFileInputProperties_2);

				ok_Hash.put("tFileInputProperties_2", true);
				end_Hash.put("tFileInputProperties_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputProperties_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}
				for (Object obj_tContextLoad_1 : noAssignList_tContextLoad_1) {

					System.err.println("Error: Parameter \""
							+ obj_tContextLoad_1
							+ "\" has not been set by tContextLoad_1");

				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				parametersToEncrypt_tContextLoad_1.add("SF_BI_DW_Password");

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tContextDump_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputProperties_1 finally ] start
				 */

				currentComponent = "tFileInputProperties_1";

				/**
				 * [tFileInputProperties_1 finally ] stop
				 */

				/**
				 * [tFileInputProperties_2 finally ] start
				 */

				currentComponent = "tFileInputProperties_2";

				/**
				 * [tFileInputProperties_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Contextload = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Contextload = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Contextload.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Contextload.length == 0) {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Contextload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Contextload, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Contextload, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Contextload) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tContextDump_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tContextDump_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[2];

					public void addRow(String[] row) {

						for (int i = 0; i < 2; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 1 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[1]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "key", "value", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tContextDump_1 begin ] start
				 */

				ok_Hash.put("tContextDump_1", false);
				start_Hash.put("tContextDump_1", System.currentTimeMillis());

				currentComponent = "tContextDump_1";

				int tos_count_tContextDump_1 = 0;

				class BytesLimit65535_tContextDump_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tContextDump_1().limitLog4jByte();
				int nb_line_tContextDump_1 = 0;
				java.util.List<String> assignList_tContextDump_1 = new java.util.ArrayList<String>();

				for (java.util.Enumeration<?> en_tContextDump_1 = context
						.propertyNames(); en_tContextDump_1.hasMoreElements();) {
					nb_line_tContextDump_1++;
					Object key_tContextDump_1 = en_tContextDump_1.nextElement();
					Object value_tContextDump_1 = context
							.getProperty(key_tContextDump_1.toString());
					if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY
							.equals(value_tContextDump_1)) {
						value_tContextDump_1 = "";// keep the same result for
													// parent and child job
					}
					row1.key = key_tContextDump_1.toString();

					if (("id_Password").equals(context
							.getContextType(key_tContextDump_1.toString()))) {
						row1.value = value_tContextDump_1.toString()
								.replaceAll(".", "*");
					} else

						row1.value = value_tContextDump_1.toString();

					/**
					 * [tContextDump_1 begin ] stop
					 */

					/**
					 * [tContextDump_1 main ] start
					 */

					currentComponent = "tContextDump_1";

					tos_count_tContextDump_1++;

					/**
					 * [tContextDump_1 main ] stop
					 */

					/**
					 * [tContextDump_1 process_data_begin ] start
					 */

					currentComponent = "tContextDump_1";

					/**
					 * [tContextDump_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					// /////////////////////

					String[] row_tLogRow_1 = new String[2];

					if (row1.key != null) { //
						row_tLogRow_1[0] = String.valueOf(row1.key);

					} //

					if (row1.value != null) { //
						row_tLogRow_1[1] = String.valueOf(row1.value);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tContextDump_1 process_data_end ] start
					 */

					currentComponent = "tContextDump_1";

					/**
					 * [tContextDump_1 process_data_end ] stop
					 */

					/**
					 * [tContextDump_1 end ] start
					 */

					currentComponent = "tContextDump_1";

				}
				globalMap.put("tContextDump_1_NB_LINE", nb_line_tContextDump_1);

				ok_Hash.put("tContextDump_1", true);
				end_Hash.put("tContextDump_1", System.currentTimeMillis());

				/**
				 * [tContextDump_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tContextDump_1 finally ] start
				 */

				currentComponent = "tContextDump_1";

				/**
				 * [tContextDump_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tContextDump_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Contextload ContextloadClass = new Contextload();

		int exitCode = ContextloadClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Contextload.class.getClassLoader()
					.getResourceAsStream(
							"local_project/contextload_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = Contextload.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("Cassandra_Host", "id_String");

			context.Cassandra_Host = (String) context
					.getProperty("Cassandra_Host");
			context.setContextType("Cassandra_Port", "id_Integer");

			try {
				context.Cassandra_Port = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("Cassandra_Port"));
			} catch (NumberFormatException e) {
				context.Cassandra_Port = null;
			}
			context.setContextType("SF_BI_DW_Username", "id_String");

			context.SF_BI_DW_Username = (String) context
					.getProperty("SF_BI_DW_Username");
			context.setContextType("SF_BI_DW_DatabaseName", "id_String");

			context.SF_BI_DW_DatabaseName = (String) context
					.getProperty("SF_BI_DW_DatabaseName");
			context.setContextType("SF_BI_DW_JDBCUrl", "id_String");

			context.SF_BI_DW_JDBCUrl = (String) context
					.getProperty("SF_BI_DW_JDBCUrl");
			context.setContextType("SF_BI_DW_Password", "id_Password");

			String pwd_SF_BI_DW_Password_value = context
					.getProperty("SF_BI_DW_Password");
			context.SF_BI_DW_Password = null;
			if (pwd_SF_BI_DW_Password_value != null) {
				if (context_param.containsKey("SF_BI_DW_Password")) {// no need
																		// to
																		// decrypt
																		// if it
																		// come
																		// from
																		// program
																		// argument
																		// or
																		// parent
																		// job
																		// runtime
					context.SF_BI_DW_Password = pwd_SF_BI_DW_Password_value;
				} else if (!pwd_SF_BI_DW_Password_value.isEmpty()) {
					try {
						context.SF_BI_DW_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_SF_BI_DW_Password_value);
						context.put("SF_BI_DW_Password",
								context.SF_BI_DW_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SF_BI_DW_DriverClass", "id_String");

			context.SF_BI_DW_DriverClass = (String) context
					.getProperty("SF_BI_DW_DriverClass");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("Cassandra_Host")) {
				context.Cassandra_Host = (String) parentContextMap
						.get("Cassandra_Host");
			}
			if (parentContextMap.containsKey("Cassandra_Port")) {
				context.Cassandra_Port = (Integer) parentContextMap
						.get("Cassandra_Port");
			}
			if (parentContextMap.containsKey("SF_BI_DW_Username")) {
				context.SF_BI_DW_Username = (String) parentContextMap
						.get("SF_BI_DW_Username");
			}
			if (parentContextMap.containsKey("SF_BI_DW_DatabaseName")) {
				context.SF_BI_DW_DatabaseName = (String) parentContextMap
						.get("SF_BI_DW_DatabaseName");
			}
			if (parentContextMap.containsKey("SF_BI_DW_JDBCUrl")) {
				context.SF_BI_DW_JDBCUrl = (String) parentContextMap
						.get("SF_BI_DW_JDBCUrl");
			}
			if (parentContextMap.containsKey("SF_BI_DW_Password")) {
				context.SF_BI_DW_Password = (java.lang.String) parentContextMap
						.get("SF_BI_DW_Password");
			}
			if (parentContextMap.containsKey("SF_BI_DW_DriverClass")) {
				context.SF_BI_DW_DriverClass = (String) parentContextMap
						.get("SF_BI_DW_DriverClass");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SF_BI_DW_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSystem_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSystem_1) {
			globalMap.put("tSystem_1_SUBPROCESS_STATE", -1);

			e_tSystem_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Contextload");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 85021 characters generated by Talend Open Studio for Big Data on the June 21,
 * 2018 5:21:22 PM IST
 ************************************************************************************************/
