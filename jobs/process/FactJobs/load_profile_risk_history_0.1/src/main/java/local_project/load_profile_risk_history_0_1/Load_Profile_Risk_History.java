// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.load_profile_risk_history_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.GetRandomPhoneNum;
import routines.Mathematical;
import routines.Numeric;
import routines.AxtriaRoutines;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringRoutines;
import routines.StringHandling;
import routines.TalendDate;
import routines.DemoRoutines;
import routines.MyEncryption;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Load_Profile_Risk_History Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Load_Profile_Risk_History implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(SF_BI_DW_DatabaseName != null){
				
					this.setProperty("SF_BI_DW_DatabaseName", SF_BI_DW_DatabaseName.toString());
				
			}
			
			if(SF_BI_DW_DriverClass != null){
				
					this.setProperty("SF_BI_DW_DriverClass", SF_BI_DW_DriverClass.toString());
				
			}
			
			if(SF_BI_DW_JDBCUrl != null){
				
					this.setProperty("SF_BI_DW_JDBCUrl", SF_BI_DW_JDBCUrl.toString());
				
			}
			
			if(SF_BI_DW_Password != null){
				
					this.setProperty("SF_BI_DW_Password", SF_BI_DW_Password.toString());
				
			}
			
			if(SF_BI_DW_Username != null){
				
					this.setProperty("SF_BI_DW_Username", SF_BI_DW_Username.toString());
				
			}
			
			if(SF_BI_STAGING_DatabaseName != null){
				
					this.setProperty("SF_BI_STAGING_DatabaseName", SF_BI_STAGING_DatabaseName.toString());
				
			}
			
			if(SF_BI_STAGING_DriverClass != null){
				
					this.setProperty("SF_BI_STAGING_DriverClass", SF_BI_STAGING_DriverClass.toString());
				
			}
			
			if(SF_BI_STAGING_JDBCUrl != null){
				
					this.setProperty("SF_BI_STAGING_JDBCUrl", SF_BI_STAGING_JDBCUrl.toString());
				
			}
			
			if(SF_BI_STAGING_Password != null){
				
					this.setProperty("SF_BI_STAGING_Password", SF_BI_STAGING_Password.toString());
				
			}
			
			if(SF_BI_STAGING_Username != null){
				
					this.setProperty("SF_BI_STAGING_Username", SF_BI_STAGING_Username.toString());
				
			}
			
			if(SMTP_Port != null){
				
					this.setProperty("SMTP_Port", SMTP_Port.toString());
				
			}
			
			if(SMTP_MailServer != null){
				
					this.setProperty("SMTP_MailServer", SMTP_MailServer.toString());
				
			}
			
			if(SMTP_From_Name != null){
				
					this.setProperty("SMTP_From_Name", SMTP_From_Name.toString());
				
			}
			
			if(SMTP_To_Name != null){
				
					this.setProperty("SMTP_To_Name", SMTP_To_Name.toString());
				
			}
			
			if(SMTP_Password != null){
				
					this.setProperty("SMTP_Password", SMTP_Password.toString());
				
			}
			
			if(SMTP_Username != null){
				
					this.setProperty("SMTP_Username", SMTP_Username.toString());
				
			}
			
			if(Cassandra_Password != null){
				
					this.setProperty("Cassandra_Password", Cassandra_Password.toString());
				
			}
			
			if(Cassandra_Port != null){
				
					this.setProperty("Cassandra_Port", Cassandra_Port.toString());
				
			}
			
			if(Cassandra_Host != null){
				
					this.setProperty("Cassandra_Host", Cassandra_Host.toString());
				
			}
			
			if(Cassandra_Username != null){
				
					this.setProperty("Cassandra_Username", Cassandra_Username.toString());
				
			}
			
		}

public String SF_BI_DW_DatabaseName;
public String getSF_BI_DW_DatabaseName(){
	return this.SF_BI_DW_DatabaseName;
}
public String SF_BI_DW_DriverClass;
public String getSF_BI_DW_DriverClass(){
	return this.SF_BI_DW_DriverClass;
}
public String SF_BI_DW_JDBCUrl;
public String getSF_BI_DW_JDBCUrl(){
	return this.SF_BI_DW_JDBCUrl;
}
public java.lang.String SF_BI_DW_Password;
public java.lang.String getSF_BI_DW_Password(){
	return this.SF_BI_DW_Password;
}
public String SF_BI_DW_Username;
public String getSF_BI_DW_Username(){
	return this.SF_BI_DW_Username;
}
public String SF_BI_STAGING_DatabaseName;
public String getSF_BI_STAGING_DatabaseName(){
	return this.SF_BI_STAGING_DatabaseName;
}
public String SF_BI_STAGING_DriverClass;
public String getSF_BI_STAGING_DriverClass(){
	return this.SF_BI_STAGING_DriverClass;
}
public String SF_BI_STAGING_JDBCUrl;
public String getSF_BI_STAGING_JDBCUrl(){
	return this.SF_BI_STAGING_JDBCUrl;
}
public java.lang.String SF_BI_STAGING_Password;
public java.lang.String getSF_BI_STAGING_Password(){
	return this.SF_BI_STAGING_Password;
}
public String SF_BI_STAGING_Username;
public String getSF_BI_STAGING_Username(){
	return this.SF_BI_STAGING_Username;
}
public String SMTP_Port;
public String getSMTP_Port(){
	return this.SMTP_Port;
}
public String SMTP_MailServer;
public String getSMTP_MailServer(){
	return this.SMTP_MailServer;
}
public String SMTP_From_Name;
public String getSMTP_From_Name(){
	return this.SMTP_From_Name;
}
public String SMTP_To_Name;
public String getSMTP_To_Name(){
	return this.SMTP_To_Name;
}
public java.lang.String SMTP_Password;
public java.lang.String getSMTP_Password(){
	return this.SMTP_Password;
}
public String SMTP_Username;
public String getSMTP_Username(){
	return this.SMTP_Username;
}
public java.lang.String Cassandra_Password;
public java.lang.String getCassandra_Password(){
	return this.Cassandra_Password;
}
public Integer Cassandra_Port;
public Integer getCassandra_Port(){
	return this.Cassandra_Port;
}
public String Cassandra_Host;
public String getCassandra_Host(){
	return this.Cassandra_Host;
}
public String Cassandra_Username;
public String getCassandra_Username(){
	return this.Cassandra_Username;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Load_Profile_Risk_History";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Load_Profile_Risk_History.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Load_Profile_Risk_History.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void Implicit_Context_Regex_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							Implicit_Context_Context_error(exception, errorComponent, globalMap);
						
						}
					
			public void Implicit_Context_Context_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					Implicit_Context_Regex_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJDBCConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCassandraConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCassandraConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCassandraInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCassandraInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCassandraInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStart_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStart_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void Implicit_Context_Regex_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCassandraConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCassandraInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStart_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSendMail_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row_Implicit_Context_RegexStruct implements routines.system.IPersistableRow<row_Implicit_Context_RegexStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_Implicit_Context_RegexStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void Implicit_Context_RegexProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_Implicit_Context_RegexStruct row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();




	
	/**
	 * [Implicit_Context_Context begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Context", false);
		start_Hash.put("Implicit_Context_Context", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_Implicit_Context_Context = 0;
		
    	class BytesLimit65535_Implicit_Context_Context{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_Implicit_Context_Context().limitLog4jByte();
	java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	int nb_line_Implicit_Context_Context = 0;

 



/**
 * [Implicit_Context_Context begin ] stop
 */



	
	/**
	 * [Implicit_Context_Regex begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Regex", false);
		start_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	
		int tos_count_Implicit_Context_Regex = 0;
		
    	class BytesLimit65535_Implicit_Context_Regex{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_Implicit_Context_Regex().limitLog4jByte();

	
	
		int nb_line_Implicit_Context_Regex = 0;
        
        int footer_Implicit_Context_Regex  = 0;
        boolean removeEmptyRowImplicit_Context_Regex = true;
        Object source_Implicit_Context_Regex = /** Start field Implicit_Context_Regex:FILENAME */"C:/TalendConfiguration/TalendConfig.txt"/** End field Implicit_Context_Regex:FILENAME */;
        
        org.talend.fileprocess.TOSDelimitedReader inImplicit_Context_Regex=null;
        if(source_Implicit_Context_Regex instanceof String || source_Implicit_Context_Regex instanceof java.io.InputStream){
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */"C:/TalendConfiguration/TalendConfig.txt"/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
        }else{
        	throw new java.lang.Exception("The source data should be specified as File Path or InputStream or java.io.Reader!");
        }
        String strImplicit_Context_Regex;
        int totalLineImplicit_Context_Regex=0,currentLineImplicit_Context_Regex=0,beginLineImplicit_Context_Regex=0,lastLineImplicit_Context_Regex=-1,validRowCountImplicit_Context_Regex=0;
        int limitImplicit_Context_Regex=-1;
        
		int headerImplicit_Context_Regex = 0;
		if(headerImplicit_Context_Regex > 0){
			beginLineImplicit_Context_Regex=headerImplicit_Context_Regex+1;
		}
    	
        if(footer_Implicit_Context_Regex > 0){
			while (inImplicit_Context_Regex.readRecord()) {
                strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord();        
				totalLineImplicit_Context_Regex++;
			}
			int lastLineTempImplicit_Context_Regex = totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex   < 0? 0 : totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex ;
			if(lastLineImplicit_Context_Regex > 0){
				lastLineImplicit_Context_Regex = lastLineImplicit_Context_Regex < lastLineTempImplicit_Context_Regex ? lastLineImplicit_Context_Regex : lastLineTempImplicit_Context_Regex; 
			}else {
				lastLineImplicit_Context_Regex = lastLineTempImplicit_Context_Regex;
			}
		  	inImplicit_Context_Regex.close();
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */"C:/TalendConfiguration/TalendConfig.txt"/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
		}
        java.util.StringTokenizer strTokenImplicit_Context_Regex;
        java.util.regex.Pattern patternImplicit_Context_Regex = java.util.regex.Pattern.compile("^([^"+"="+"]*)"+"="+"(.*)$");
        java.util.regex.Matcher matcherImplicit_Context_Regex = null;
        
        
        while (inImplicit_Context_Regex.readRecord()) {
            strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord(); 
        	
       		currentLineImplicit_Context_Regex++;
        	if(currentLineImplicit_Context_Regex < beginLineImplicit_Context_Regex) {
        		continue;
        	}
        	if(lastLineImplicit_Context_Regex > -1 && currentLineImplicit_Context_Regex > lastLineImplicit_Context_Regex) {
        		break;
        	}
        	if(removeEmptyRowImplicit_Context_Regex && ("").equals(strImplicit_Context_Regex)){
        		continue;
        	}
        	if(limitImplicit_Context_Regex!=-1&& validRowCountImplicit_Context_Regex >= limitImplicit_Context_Regex){
        		break;
        	}
        	
        	matcherImplicit_Context_Regex = patternImplicit_Context_Regex.matcher(strImplicit_Context_Regex);
        	int groupCountImplicit_Context_Regex = 0;
        	boolean isMatchImplicit_Context_Regex = matcherImplicit_Context_Regex.find(); 
        	if(isMatchImplicit_Context_Regex){
        	groupCountImplicit_Context_Regex=matcherImplicit_Context_Regex.groupCount();
			}
    		row_Implicit_Context_Regex = null;						
			
			boolean lineIsEmptyImplicit_Context_Regex = strImplicit_Context_Regex.length() == 0;
			
			String[] valueImplicit_Context_Regex = new String[2];
			String frontCharImplicit_Context_Regex,behindCharImplicit_Context_Regex;
			for(int i=0;i<2;i++){
				valueImplicit_Context_Regex[i] = "";
				if(lineIsEmptyImplicit_Context_Regex){
					continue;
				}
				if(i < groupCountImplicit_Context_Regex){
					valueImplicit_Context_Regex[i] = matcherImplicit_Context_Regex.group(i+1);
				}
			}
			validRowCountImplicit_Context_Regex++;
			
			boolean whetherReject_Implicit_Context_Regex = false;
			row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();
			try {			
			if(!isMatchImplicit_Context_Regex){//line data not matched with given regex parameter
        		throw new java.lang.Exception("Line doesn't match: " + strImplicit_Context_Regex);
        	}
								
						if(valueImplicit_Context_Regex[0]!=null && valueImplicit_Context_Regex[0].length() > 0) {
							row_Implicit_Context_Regex.key = valueImplicit_Context_Regex[0];					
						} else {
						row_Implicit_Context_Regex.key = "";}
						
						if(valueImplicit_Context_Regex[1]!=null && valueImplicit_Context_Regex[1].length() > 0) {
							row_Implicit_Context_Regex.value = valueImplicit_Context_Regex[1];					
						} else {
						row_Implicit_Context_Regex.value = "";}
	
										
					
    } catch (java.lang.Exception e) {
        whetherReject_Implicit_Context_Regex = true;
                    	if(isMatchImplicit_Context_Regex){
                    		System.err.println(e.getMessage());
                    	}
                row_Implicit_Context_Regex = null;
    }					
					
					
			
			nb_line_Implicit_Context_Regex++;

 



/**
 * [Implicit_Context_Regex begin ] stop
 */
	
	/**
	 * [Implicit_Context_Regex main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 


	tos_count_Implicit_Context_Regex++;

/**
 * [Implicit_Context_Regex main ] stop
 */
	
	/**
	 * [Implicit_Context_Regex process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_begin ] stop
 */
// Start of branch "row_Implicit_Context_Regex"
if(row_Implicit_Context_Regex != null) { 



	
	/**
	 * [Implicit_Context_Context main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

			//Main
			//row_Implicit_Context_Regex


			
				if(execStat){
					runStat.updateStatOnConnection("Main"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_Implicit_Context_Context = null;
                    String key_Implicit_Context_Context = null;
                      if (row_Implicit_Context_Regex.key != null){
                          tmp_key_Implicit_Context_Context = row_Implicit_Context_Regex.key.trim();
                        if ((tmp_key_Implicit_Context_Context.startsWith("#") || tmp_key_Implicit_Context_Context.startsWith("!") )){
                          tmp_key_Implicit_Context_Context = null;
                        } else {
                          row_Implicit_Context_Regex.key = tmp_key_Implicit_Context_Context;
                        }
                      }
                        if(row_Implicit_Context_Regex.key != null) {
                    key_Implicit_Context_Context =
                        row_Implicit_Context_Regex.key;
                        }
                    String value_Implicit_Context_Context = null;
                        if(row_Implicit_Context_Regex.value != null) {
                    value_Implicit_Context_Context =
                        row_Implicit_Context_Regex.value;
                        }
				
				String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;
										
						if ("SF_BI_DW_Password".equals(key_Implicit_Context_Context) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");						
						if ("SF_BI_STAGING_Password".equals(key_Implicit_Context_Context) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");						
						if ("SMTP_Password".equals(key_Implicit_Context_Context) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");						
						if ("Cassandra_Password".equals(key_Implicit_Context_Context) ) currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context.replaceAll(".", "*");

  if (tmp_key_Implicit_Context_Context != null){
  try{
        if(key_Implicit_Context_Context!=null && "SF_BI_DW_DatabaseName".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_DW_DatabaseName=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_DW_DriverClass".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_DW_DriverClass=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_DW_JDBCUrl".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_DW_JDBCUrl=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_DW_Password".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_DW_Password=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_DW_Username".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_DW_Username=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_STAGING_DatabaseName".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_STAGING_DatabaseName=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_STAGING_DriverClass".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_STAGING_DriverClass=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_STAGING_JDBCUrl".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_STAGING_JDBCUrl=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_STAGING_Password".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_STAGING_Password=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SF_BI_STAGING_Username".equals(key_Implicit_Context_Context))
        {
           context.SF_BI_STAGING_Username=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SMTP_Port".equals(key_Implicit_Context_Context))
        {
           context.SMTP_Port=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SMTP_MailServer".equals(key_Implicit_Context_Context))
        {
           context.SMTP_MailServer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SMTP_From_Name".equals(key_Implicit_Context_Context))
        {
           context.SMTP_From_Name=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SMTP_To_Name".equals(key_Implicit_Context_Context))
        {
           context.SMTP_To_Name=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SMTP_Password".equals(key_Implicit_Context_Context))
        {
           context.SMTP_Password=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "SMTP_Username".equals(key_Implicit_Context_Context))
        {
           context.SMTP_Username=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Cassandra_Password".equals(key_Implicit_Context_Context))
        {
           context.Cassandra_Password=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Cassandra_Port".equals(key_Implicit_Context_Context))
        {

                context.Cassandra_Port=Integer.parseInt(value_Implicit_Context_Context);

        }

        if(key_Implicit_Context_Context!=null && "Cassandra_Host".equals(key_Implicit_Context_Context))
        {
           context.Cassandra_Host=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "Cassandra_Username".equals(key_Implicit_Context_Context))
        {
           context.Cassandra_Username=value_Implicit_Context_Context;
        }


        if (context.getProperty(key_Implicit_Context_Context)!=null)
        {
            assignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }else  {
            newPropertyList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }
        if(value_Implicit_Context_Context == null){
            context.setProperty(key_Implicit_Context_Context, "");
        }else{
            context.setProperty(key_Implicit_Context_Context,value_Implicit_Context_Context);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_Implicit_Context_Context + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_Implicit_Context_Context++;
    }
        //////////////////////////

 


	tos_count_Implicit_Context_Context++;

/**
 * [Implicit_Context_Context main ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_begin ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_end ] stop
 */

} // End of branch "row_Implicit_Context_Regex"




	
	/**
	 * [Implicit_Context_Regex process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_end ] stop
 */
	
	/**
	 * [Implicit_Context_Regex end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

	
	
    		}
			if(!(source_Implicit_Context_Regex instanceof java.io.InputStream)){
            	inImplicit_Context_Regex.close();
            }
            inImplicit_Context_Regex = null;
            globalMap.put("Implicit_Context_Regex_NB_LINE",nb_line_Implicit_Context_Regex);      
 

ok_Hash.put("Implicit_Context_Regex", true);
end_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());




/**
 * [Implicit_Context_Regex end ] stop
 */

	
	/**
	 * [Implicit_Context_Context end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
	
	java.util.Enumeration<?> enu_Implicit_Context_Context = context.propertyNames();
    while(enu_Implicit_Context_Context.hasMoreElements())
    {           
    	String key_Implicit_Context_Context = (String)enu_Implicit_Context_Context.nextElement();
        if(!assignList_Implicit_Context_Context.contains(key_Implicit_Context_Context) && !newPropertyList_Implicit_Context_Context.contains(key_Implicit_Context_Context))
        {
            noAssignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }          
    } 

    String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context.toString();
    String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context.substring(1, newPropertyStr_Implicit_Context_Context.length() - 1);
    
    String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context.toString();
    String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context.substring(1, noAssignStr_Implicit_Context_Context.length() - 1);
    
    globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT", newProperty_Implicit_Context_Context);
    globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED", noAssign_Implicit_Context_Context);

    globalMap.put("Implicit_Context_Context_NB_LINE",nb_line_Implicit_Context_Context);

	List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();
	
		parametersToEncrypt_Implicit_Context_Context.add("SF_BI_DW_Password");
		
		parametersToEncrypt_Implicit_Context_Context.add("SF_BI_STAGING_Password");
		
		parametersToEncrypt_Implicit_Context_Context.add("SMTP_Password");
		
		parametersToEncrypt_Implicit_Context_Context.add("Cassandra_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_Implicit_Context_Context));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("Implicit_Context_Context", true);
end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());




/**
 * [Implicit_Context_Context end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [Implicit_Context_Regex finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex finally ] stop
 */

	
	/**
	 * [Implicit_Context_Context finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJDBCConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_1", false);
		start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_1";

	
		int tos_count_tJDBCConnection_1 = 0;
		
    	class BytesLimit65535_tJDBCConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJDBCConnection_1().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_1 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_1 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_1.createRuntimeProperties();
 		                    props_tJDBCConnection_1.setValue("shareConnection",
 		                    false);
 		                    
 		                    props_tJDBCConnection_1.setValue("useDataSource",
 		                    false);
 		                    
 		                    props_tJDBCConnection_1.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_1.setValue("autocommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_1.connection.setValue("jdbcUrl",
 		                    context.SF_BI_DW_JDBCUrl);
 		                    
 		                    props_tJDBCConnection_1.connection.setValue("driverClass",
 		                    context.SF_BI_DW_DriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_1_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_1_connection_driverTable_drivers.add("mvn:org.talend.libraries/snowflake-jdbc-3.2.2/6.0.0-SNAPSHOT/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_1.connection.driverTable).setValue("drivers",tJDBCConnection_1_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_1.connection.userPassword.setValue("userId",
 		                    context.SF_BI_DW_Username);
 		                    
 		                    props_tJDBCConnection_1.connection.userPassword.setValue("password",
 		                    MyEncryption.decrypt(context.SF_BI_DW_Password));
 		                    
globalMap.put("tJDBCConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_1);

java.net.URL mappings_url_tJDBCConnection_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_1_MAPPINGS_URL", mappings_url_tJDBCConnection_1);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_1 = null;
topology_tJDBCConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_1 = def_tJDBCConnection_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_1, topology_tJDBCConnection_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_1 = def_tJDBCConnection_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_1 = componentRuntime_tJDBCConnection_1.initialize(container_tJDBCConnection_1, props_tJDBCConnection_1);

if (initVr_tJDBCConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_1.getMessage());
}

if(componentRuntime_tJDBCConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_1;
	compDriverInitialization_tJDBCConnection_1.runAtDriver(container_tJDBCConnection_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_1 = null;
if(componentRuntime_tJDBCConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_1;
	org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_1 = sourceOrSink_tJDBCConnection_1.validate(container_tJDBCConnection_1);
	if (vr_tJDBCConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tJDBCConnection_1.getMessage());
	}
}

 



/**
 * [tJDBCConnection_1 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	


 


	tos_count_tJDBCConnection_1++;

/**
 * [tJDBCConnection_1 main ] stop
 */
	
	/**
	 * [tJDBCConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	


 



/**
 * [tJDBCConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	


 



/**
 * [tJDBCConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_1", true);
end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJDBCConnection_2Process(globalMap);



/**
 * [tJDBCConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	
// finally of generic

 



/**
 * [tJDBCConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_2", false);
		start_Hash.put("tJDBCConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_2";

	
		int tos_count_tJDBCConnection_2 = 0;
		
    	class BytesLimit65535_tJDBCConnection_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJDBCConnection_2().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_2 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_2 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_2.createRuntimeProperties();
 		                    props_tJDBCConnection_2.setValue("shareConnection",
 		                    false);
 		                    
 		                    props_tJDBCConnection_2.setValue("useDataSource",
 		                    false);
 		                    
 		                    props_tJDBCConnection_2.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_2.setValue("autocommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_2.connection.setValue("jdbcUrl",
 		                    context.SF_BI_STAGING_JDBCUrl);
 		                    
 		                    props_tJDBCConnection_2.connection.setValue("driverClass",
 		                    context.SF_BI_STAGING_DriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_2_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_2_connection_driverTable_drivers.add("mvn:org.talend.libraries/snowflake-jdbc-3.2.2/6.0.0-SNAPSHOT/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_2.connection.driverTable).setValue("drivers",tJDBCConnection_2_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_2.connection.userPassword.setValue("userId",
 		                    context.SF_BI_STAGING_Username);
 		                    
 		                    props_tJDBCConnection_2.connection.userPassword.setValue("password",
 		                    MyEncryption.decrypt(context.SF_BI_STAGING_Password));
 		                    
globalMap.put("tJDBCConnection_2_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_2);

java.net.URL mappings_url_tJDBCConnection_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_2_MAPPINGS_URL", mappings_url_tJDBCConnection_2);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_2 = null;
topology_tJDBCConnection_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_2 = def_tJDBCConnection_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_2, topology_tJDBCConnection_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_2 = def_tJDBCConnection_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_2 = componentRuntime_tJDBCConnection_2.initialize(container_tJDBCConnection_2, props_tJDBCConnection_2);

if (initVr_tJDBCConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_2.getMessage());
}

if(componentRuntime_tJDBCConnection_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_2;
	compDriverInitialization_tJDBCConnection_2.runAtDriver(container_tJDBCConnection_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_2 = null;
if(componentRuntime_tJDBCConnection_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_2;
	org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_2 = sourceOrSink_tJDBCConnection_2.validate(container_tJDBCConnection_2);
	if (vr_tJDBCConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tJDBCConnection_2.getMessage());
	}
}

 



/**
 * [tJDBCConnection_2 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_2 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	


 


	tos_count_tJDBCConnection_2++;

/**
 * [tJDBCConnection_2 main ] stop
 */
	
	/**
	 * [tJDBCConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	


 



/**
 * [tJDBCConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	


 



/**
 * [tJDBCConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_2 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_2", true);
end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tCassandraConnection_2Process(globalMap);



/**
 * [tJDBCConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	
// finally of generic

 



/**
 * [tJDBCConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tCassandraConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCassandraConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCassandraConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tCassandraConnection_2", false);
		start_Hash.put("tCassandraConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tCassandraConnection_2";

	
		int tos_count_tCassandraConnection_2 = 0;
		
    	class BytesLimit65535_tCassandraConnection_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCassandraConnection_2().limitLog4jByte();

 



/**
 * [tCassandraConnection_2 begin ] stop
 */
	
	/**
	 * [tCassandraConnection_2 main ] start
	 */

	

	
	
	currentComponent="tCassandraConnection_2";

	
	

    	
	
	
	
    com.datastax.driver.core.Cluster cluster_tCassandraConnection_2 = com.datastax.driver.core.Cluster.builder()
    															.addContactPoints(context.Cassandra_Host.split(","))
    															.withPort(Integer.valueOf(context.Cassandra_Port))
                                                            	
    															.build();
	
	com.datastax.driver.core.Session connection_tCassandraConnection_2 = null;
	connection_tCassandraConnection_2 = cluster_tCassandraConnection_2.connect();
	globalMap.put("cluster_tCassandraConnection_2", cluster_tCassandraConnection_2);
	globalMap.put("connection_tCassandraConnection_2", connection_tCassandraConnection_2);

 


	tos_count_tCassandraConnection_2++;

/**
 * [tCassandraConnection_2 main ] stop
 */
	
	/**
	 * [tCassandraConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCassandraConnection_2";

	

 



/**
 * [tCassandraConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tCassandraConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tCassandraConnection_2";

	

 



/**
 * [tCassandraConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tCassandraConnection_2 end ] start
	 */

	

	
	
	currentComponent="tCassandraConnection_2";

	

 

ok_Hash.put("tCassandraConnection_2", true);
end_Hash.put("tCassandraConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tDBInput_7Process(globalMap);



/**
 * [tCassandraConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCassandraConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tCassandraConnection_2";

	

 



/**
 * [tCassandraConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCassandraConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public Long CollectionstartDate_Epoch;

				public Long getCollectionstartDate_Epoch () {
					return this.CollectionstartDate_Epoch;
				}
				
			    public Long CollectionEndDate_Epoch;

				public Long getCollectionEndDate_Epoch () {
					return this.CollectionEndDate_Epoch;
				}
				
			    public java.util.Date CollectionstartDate;

				public java.util.Date getCollectionstartDate () {
					return this.CollectionstartDate;
				}
				
			    public java.util.Date CollectionEndDate;

				public java.util.Date getCollectionEndDate () {
					return this.CollectionEndDate;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CollectionstartDate_Epoch = null;
           				} else {
           			    	this.CollectionstartDate_Epoch = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CollectionEndDate_Epoch = null;
           				} else {
           			    	this.CollectionEndDate_Epoch = dis.readLong();
           				}
					
					this.CollectionstartDate = readDate(dis);
					
					this.CollectionEndDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.CollectionstartDate_Epoch == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CollectionstartDate_Epoch);
		            	}
					
					// Long
				
						if(this.CollectionEndDate_Epoch == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CollectionEndDate_Epoch);
		            	}
					
					// java.util.Date
				
						writeDate(this.CollectionstartDate,dos);
					
					// java.util.Date
				
						writeDate(this.CollectionEndDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CollectionstartDate_Epoch="+String.valueOf(CollectionstartDate_Epoch));
		sb.append(",CollectionEndDate_Epoch="+String.valueOf(CollectionEndDate_Epoch));
		sb.append(",CollectionstartDate="+String.valueOf(CollectionstartDate));
		sb.append(",CollectionEndDate="+String.valueOf(CollectionEndDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public Long CollectionstartDate_Epoch;

				public Long getCollectionstartDate_Epoch () {
					return this.CollectionstartDate_Epoch;
				}
				
			    public Long CollectionEndDate_Epoch;

				public Long getCollectionEndDate_Epoch () {
					return this.CollectionEndDate_Epoch;
				}
				
			    public java.util.Date CollectionstartDate;

				public java.util.Date getCollectionstartDate () {
					return this.CollectionstartDate;
				}
				
			    public java.util.Date CollectionEndDate;

				public java.util.Date getCollectionEndDate () {
					return this.CollectionEndDate;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CollectionstartDate_Epoch = null;
           				} else {
           			    	this.CollectionstartDate_Epoch = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CollectionEndDate_Epoch = null;
           				} else {
           			    	this.CollectionEndDate_Epoch = dis.readLong();
           				}
					
					this.CollectionstartDate = readDate(dis);
					
					this.CollectionEndDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.CollectionstartDate_Epoch == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CollectionstartDate_Epoch);
		            	}
					
					// Long
				
						if(this.CollectionEndDate_Epoch == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CollectionEndDate_Epoch);
		            	}
					
					// java.util.Date
				
						writeDate(this.CollectionstartDate,dos);
					
					// java.util.Date
				
						writeDate(this.CollectionEndDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CollectionstartDate_Epoch="+String.valueOf(CollectionstartDate_Epoch));
		sb.append(",CollectionEndDate_Epoch="+String.valueOf(CollectionEndDate_Epoch));
		sb.append(",CollectionstartDate="+String.valueOf(CollectionstartDate));
		sb.append(",CollectionEndDate="+String.valueOf(CollectionEndDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
    	class BytesLimit65535_tDBInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_7().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBInput_7 =
        new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tDBInput_7 =
        (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tDBInput_7.createRuntimeProperties();
 		                    props_tDBInput_7.setValue("sql",
 		                    "SELECT DATE_PART('EPOCH_MILLISECOND',CollectionstartDate) AS CollectionstartDate_Epoch,  DATE_PART('EPOCH_MILLISECOND',CollectionEndDate) AS CollectionEndDate_Epoch, CONVERT_TIMEZONE('US/Pacific','UTC',CollectionstartDate) AS CollectionstartDate, CONVERT_TIMEZONE('US/Pacific','UTC',CollectionEndDate) AS CollectionEndDate from STG.DATA_COLLECTION Where LoadType = 'Load_Profile_Risk_Data' AND STAGING_SRC_LOADED =FALSE");
 		                    
 		                    props_tDBInput_7.setValue("useCursor",
 		                    false);
 		                    
 		                    props_tDBInput_7.setValue("trimStringOrCharColumns",
 		                    false);
 		                    
 		                    props_tDBInput_7.setValue("enableDBMapping",
 		                    false);
 		                    
 		                    props_tDBInput_7.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBInput_7.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBInput_7.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBInput_7.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBInput_7.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MAIN\",\"fields\":[{\"name\":\"CollectionstartDate_Epoch\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"CollectionstartDate_Epoch\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CollectionstartDate_Epoch\",\"di.column.relatedEntity\":\"\"},{\"name\":\"CollectionEndDate_Epoch\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"CollectionEndDate_Epoch\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CollectionEndDate_Epoch\",\"di.column.relatedEntity\":\"\"},{\"name\":\"CollectionstartDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"CollectionstartDate\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CollectionstartDate\",\"di.column.relatedEntity\":\"\"},{\"name\":\"CollectionEndDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"CollectionEndDate\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CollectionEndDate\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}"));
 		                    
 		                    props_tDBInput_7.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    java.util.List<Object> tDBInput_7_trimTable_trim = new java.util.ArrayList<Object>();
 		                    
 		                                tDBInput_7_trimTable_trim.add(false);
 		                                
 		                                tDBInput_7_trimTable_trim.add(false);
 		                                
 		                                tDBInput_7_trimTable_trim.add(false);
 		                                
 		                                tDBInput_7_trimTable_trim.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_7.trimTable).setValue("trim",tDBInput_7_trimTable_trim);
 		                    
 		                    java.util.List<Object> tDBInput_7_trimTable_columnName = new java.util.ArrayList<Object>();
 		                    
 		                            tDBInput_7_trimTable_columnName.add("CollectionstartDate_Epoch");
 		                            
 		                            tDBInput_7_trimTable_columnName.add("CollectionEndDate_Epoch");
 		                            
 		                            tDBInput_7_trimTable_columnName.add("CollectionstartDate");
 		                            
 		                            tDBInput_7_trimTable_columnName.add("CollectionEndDate");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_7.trimTable).setValue("columnName",tDBInput_7_trimTable_columnName);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBInput_7.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBInput_7 = props_tDBInput_7.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBInput_7 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBInput_7 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBInput_7 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBInput_7.referencedComponent.setReference(referencedComponentProperties_tDBInput_7);
        }
    }
globalMap.put("tDBInput_7_COMPONENT_RUNTIME_PROPERTIES", props_tDBInput_7);

java.net.URL mappings_url_tDBInput_7= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBInput_7_MAPPINGS_URL", mappings_url_tDBInput_7);

org.talend.components.api.container.RuntimeContainer container_tDBInput_7 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBInput_7";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBInput_7 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBInput_7 = null;
topology_tDBInput_7 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBInput_7 = def_tDBInput_7.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBInput_7, topology_tDBInput_7);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBInput_7 = def_tDBInput_7.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBInput_7 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBInput_7.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBInput_7 = componentRuntime_tDBInput_7.initialize(container_tDBInput_7, props_tDBInput_7);

if (initVr_tDBInput_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBInput_7.getMessage());
}

if(componentRuntime_tDBInput_7 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBInput_7 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBInput_7;
	compDriverInitialization_tDBInput_7.runAtDriver(container_tDBInput_7);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBInput_7 = null;
if(componentRuntime_tDBInput_7 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBInput_7 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBInput_7;
	org.talend.daikon.properties.ValidationResult vr_tDBInput_7 = sourceOrSink_tDBInput_7.validate(container_tDBInput_7);
	if (vr_tDBInput_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBInput_7.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tDBInput_7 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tDBInput_7;
    org.talend.components.api.component.runtime.Reader reader_tDBInput_7 =
            source_tDBInput_7.createReader(container_tDBInput_7);
	reader_tDBInput_7 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tDBInput_7, container_tDBInput_7);

        boolean multi_output_is_allowed_tDBInput_7 = false;
        org.talend.components.api.component.Connector c_tDBInput_7 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tDBInput_7.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tDBInput_7 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tDBInput_7 = true;
            }
        }
        org.apache.avro.Schema schema_tDBInput_7 = props_tDBInput_7.getSchema(c_tDBInput_7, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBInput_7 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tDBInput_7, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBInput_7 = null;

    // Iterate through the incoming data.
    boolean available_tDBInput_7 = reader_tDBInput_7.start();

    resourceMap.put("reader_tDBInput_7", reader_tDBInput_7);

    for (; available_tDBInput_7; available_tDBInput_7 = reader_tDBInput_7.advance()) {
    	nb_line_tDBInput_7++;

    	
        if (multi_output_is_allowed_tDBInput_7) {
                row3 = null;

        }

        try {
            Object data_tDBInput_7 = reader_tDBInput_7.getCurrent();

                if(multi_output_is_allowed_tDBInput_7) {
                    row3 = new row3Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tDBInput_7 == null) {
            factory_tDBInput_7 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tDBInput_7.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tDBInput_7.setWrapped(factory_tDBInput_7.convertToAvro(data_tDBInput_7));
                Object columnValue_0_tDBInput_7 = outgoingEnforcer_tDBInput_7.get(0);
                        row3.CollectionstartDate_Epoch = (Long) (columnValue_0_tDBInput_7);
                Object columnValue_1_tDBInput_7 = outgoingEnforcer_tDBInput_7.get(1);
                        row3.CollectionEndDate_Epoch = (Long) (columnValue_1_tDBInput_7);
                Object columnValue_2_tDBInput_7 = outgoingEnforcer_tDBInput_7.get(2);
                        row3.CollectionstartDate = (java.util.Date) (columnValue_2_tDBInput_7);
                Object columnValue_3_tDBInput_7 = outgoingEnforcer_tDBInput_7.get(3);
                        row3.CollectionEndDate = (java.util.Date) (columnValue_3_tDBInput_7);
        } catch (org.talend.components.api.exception.DataRejectException e_tDBInput_7) {
        	java.util.Map<String,Object> info_tDBInput_7 = e_tDBInput_7.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tDBInput_7 = null;
            	if(info_tDBInput_7.containsKey("error")){
            		errorMessage_tDBInput_7 = info_tDBInput_7.get("error");
        		}else if(info_tDBInput_7.containsKey("errorMessage")){
            		errorMessage_tDBInput_7 = info_tDBInput_7.get("errorMessage");
        		}else{
        			errorMessage_tDBInput_7 = "Rejected but error message missing";
        		}
        		errorMessage_tDBInput_7 = "Row "+ nb_line_tDBInput_7 + ": "+errorMessage_tDBInput_7;
    			System.err.println(errorMessage_tDBInput_7);
            	// If the record is reject, the main line record should put NULL
            	row3 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tDBInput_7 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBInput_7 = null;


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	


 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	


 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.CollectionstartDate_Epoch = row3.CollectionstartDate_Epoch ;
out2_tmp.CollectionEndDate_Epoch = row3.CollectionEndDate_Epoch ;
out2_tmp.CollectionstartDate = row3.CollectionstartDate ;
out2_tmp.CollectionEndDate = row3.CollectionEndDate ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//out2
			//out2


			
				if(execStat){
					runStat.updateStatOnConnection("out2"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
globalMap.put("CollectionstartDate_Epoch",out2.CollectionstartDate_Epoch);
globalMap.put("CollectionEndDate_Epoch",out2.CollectionEndDate_Epoch);
globalMap.put("CollectionstartDate",TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",out2.CollectionstartDate));
globalMap.put("CollectionEndDate",TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",out2.CollectionEndDate));
globalMap.put("JobID",88);
globalMap.put("TableName","Security_Profile_Risk_History");
System.out.println(globalMap.get("CollectionstartDate"));
System.out.println(globalMap.get("CollectionEndDate"));
System.out.println(globalMap.get("JobID"));
System.out.println(globalMap.get("TableName"));

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	


 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	
// end of generic


resourceMap.put("finish_tDBInput_7", Boolean.TRUE);

    } // while
    reader_tDBInput_7.close();
    final java.util.Map<String, Object> resultMap_tDBInput_7 = reader_tDBInput_7.getReturnValues();
if(resultMap_tDBInput_7!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBInput_7 : resultMap_tDBInput_7.entrySet()) {
		switch(entry_tDBInput_7.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBInput_7.setComponentData("tDBInput_7", "ERROR_MESSAGE", entry_tDBInput_7.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBInput_7.setComponentData("tDBInput_7", "NB_LINE", entry_tDBInput_7.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBInput_7.setComponentData("tDBInput_7", "NB_SUCCESS", entry_tDBInput_7.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBInput_7.setComponentData("tDBInput_7", "NB_REJECT", entry_tDBInput_7.getValue());
			break;
		default :
            StringBuilder studio_key_tDBInput_7 = new StringBuilder();
            for (int i_tDBInput_7 = 0; i_tDBInput_7 < entry_tDBInput_7.getKey().length(); i_tDBInput_7++) {
                char ch_tDBInput_7 = entry_tDBInput_7.getKey().charAt(i_tDBInput_7);
                if(Character.isUpperCase(ch_tDBInput_7) && i_tDBInput_7> 0) {
                	studio_key_tDBInput_7.append('_');
                }
                studio_key_tDBInput_7.append(ch_tDBInput_7);
            }
			container_tDBInput_7.setComponentData("tDBInput_7", studio_key_tDBInput_7.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBInput_7.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tDBRow_3Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	
// finally of generic


if(resourceMap.get("finish_tDBInput_7")==null){
    if(resourceMap.get("reader_tDBInput_7")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tDBInput_7")).close();
		} catch (java.io.IOException e_tDBInput_7) {
			String errorMessage_tDBInput_7 = "failed to release the resource in tDBInput_7 :" + e_tDBInput_7.getMessage();
			System.err.println(errorMessage_tDBInput_7);
		}
	}
}
 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_3", false);
		start_Hash.put("tDBRow_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_3";

	
		int tos_count_tDBRow_3 = 0;
		
    	class BytesLimit65535_tDBRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_3().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_3 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_3 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_3.createRuntimeProperties();
 		                    props_tDBRow_3.setValue("sql",
 		                    "Update STG.Job_Control  SET JobStartDate=CONVERT_TIMEZONE('US/Pacific','UTC',cast(CURRENT_TIMESTAMP() as TIMESTAMP_NTZ)), JobEndDate=NULL, DURATION=NULL WHERE JOBID="+globalMap.get("JobID"));
 		                    
 		                    props_tDBRow_3.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_3.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_3.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_3.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_3.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_3.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_3.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_3.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_3.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_3.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_3.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_3.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_3 = props_tDBRow_3.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_3.referencedComponent.setReference(referencedComponentProperties_tDBRow_3);
        }
    }
globalMap.put("tDBRow_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_3);

java.net.URL mappings_url_tDBRow_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_3_MAPPINGS_URL", mappings_url_tDBRow_3);

org.talend.components.api.container.RuntimeContainer container_tDBRow_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_3 = null;
topology_tDBRow_3 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_3 = def_tDBRow_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_3, topology_tDBRow_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_3 = def_tDBRow_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_3 = componentRuntime_tDBRow_3.initialize(container_tDBRow_3, props_tDBRow_3);

if (initVr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_3.getMessage());
}

if(componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_3;
	compDriverInitialization_tDBRow_3.runAtDriver(container_tDBRow_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_3 = null;
if(componentRuntime_tDBRow_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_3;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_3 = sourceOrSink_tDBRow_3.validate(container_tDBRow_3);
	if (vr_tDBRow_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_3.getMessage());
	}
}

 



/**
 * [tDBRow_3 begin ] stop
 */
	
	/**
	 * [tDBRow_3 main ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	


 


	tos_count_tDBRow_3++;

/**
 * [tDBRow_3 main ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	


 



/**
 * [tDBRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	


 



/**
 * [tDBRow_3 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_3 end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	
// end of generic


resourceMap.put("finish_tDBRow_3", Boolean.TRUE);

 

ok_Hash.put("tDBRow_3", true);
end_Hash.put("tDBRow_3", System.currentTimeMillis());




/**
 * [tDBRow_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_3")==null){
}
 



/**
 * [tDBRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public String partnerid;

				public String getPartnerid () {
					return this.partnerid;
				}
				
			    public String siteid;

				public String getSiteid () {
					return this.siteid;
				}
				
			    public java.util.Date insertedat;

				public java.util.Date getInsertedat () {
					return this.insertedat;
				}
				
			    public String profileid;

				public String getProfileid () {
					return this.profileid;
				}
				
			    public String endpointid;

				public String getEndpointid () {
					return this.endpointid;
				}
				
			    public Object categories;

				public Object getCategories () {
					return this.categories;
				}
				
			    public String clientid;

				public String getClientid () {
					return this.clientid;
				}
				
			    public Integer score;

				public Integer getScore () {
					return this.score;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.partnerid = readString(dis);
					
					this.siteid = readString(dis);
					
					this.insertedat = readDate(dis);
					
					this.profileid = readString(dis);
					
					this.endpointid = readString(dis);
					
						this.categories = (Object) dis.readObject();
					
					this.clientid = readString(dis);
					
						this.score = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.partnerid,dos);
					
					// String
				
						writeString(this.siteid,dos);
					
					// java.util.Date
				
						writeDate(this.insertedat,dos);
					
					// String
				
						writeString(this.profileid,dos);
					
					// String
				
						writeString(this.endpointid,dos);
					
					// Object
				
       			    	dos.writeObject(this.categories);
					
					// String
				
						writeString(this.clientid,dos);
					
					// Integer
				
						writeInteger(this.score,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("partnerid="+partnerid);
		sb.append(",siteid="+siteid);
		sb.append(",insertedat="+String.valueOf(insertedat));
		sb.append(",profileid="+profileid);
		sb.append(",endpointid="+endpointid);
		sb.append(",categories="+String.valueOf(categories));
		sb.append(",clientid="+clientid);
		sb.append(",score="+String.valueOf(score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tCassandraInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCassandraInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		
    	class BytesLimit65535_tDBOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_1().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBOutput_1 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tDBOutput_1 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tDBOutput_1.createRuntimeProperties();
 		                    props_tDBOutput_1.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);
 		                    
 		                    props_tDBOutput_1.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("debug",
 		                    false);
 		                    
 		                    props_tDBOutput_1.setValue("useBatch",
 		                    true);
 		                    
 		                    props_tDBOutput_1.setValue("batchSize",
 		                    10000);
 		                    
 		                    props_tDBOutput_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_1.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBOutput_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    java.util.List<Object> tDBOutput_1_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_1_connection_driverTable_drivers.add("mvn:org.talend.libraries/newLine/6.0.0-SNAPSHOT/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_1.connection.driverTable).setValue("drivers",tDBOutput_1_connection_driverTable_drivers);
 		                    
 		                    props_tDBOutput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_1.tableSelection.setValue("tablename",
 		                    "SRC.Staging_Profile_Risk_History");
 		                    
 		                    props_tDBOutput_1.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"tDBOutput_1\",\"fields\":[{\"name\":\"partnerid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"partnerid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"partnerid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"siteid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"siteid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"siteid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"insertedat\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"timestamp\",\"talend.field.dbColumnName\":\"insertedat\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"insertedat\",\"di.column.relatedEntity\":\"\"},{\"name\":\"profileid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"uuid\",\"talend.field.dbColumnName\":\"profileid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"profileid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"endpointid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"uuid\",\"talend.field.dbColumnName\":\"endpointid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"endpointid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"categories\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"map\",\"talend.field.dbColumnName\":\"categories\",\"di.column.talendType\":\"id_Object\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"categories\",\"di.column.relatedEntity\":\"\"},{\"name\":\"clientid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"clientid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"clientid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"score\",\"type\":[\"int\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"int\",\"talend.field.dbColumnName\":\"score\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"score\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"tDBOutput_1\"}"));
 		                    
 		                    props_tDBOutput_1.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"tDBOutput_1\",\"fields\":[{\"name\":\"partnerid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"partnerid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"partnerid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"siteid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"siteid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"siteid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"insertedat\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"timestamp\",\"talend.field.dbColumnName\":\"insertedat\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"insertedat\",\"di.column.relatedEntity\":\"\"},{\"name\":\"profileid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"uuid\",\"talend.field.dbColumnName\":\"profileid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"profileid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"endpointid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"uuid\",\"talend.field.dbColumnName\":\"endpointid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"endpointid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"categories\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"map\",\"talend.field.dbColumnName\":\"categories\",\"di.column.talendType\":\"id_Object\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"categories\",\"di.column.relatedEntity\":\"\"},{\"name\":\"clientid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"clientid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"clientid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"score\",\"type\":[\"int\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"int\",\"talend.field.dbColumnName\":\"score\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"score\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"tDBOutput_1\"}"));
 		                    
 		                    props_tDBOutput_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"partnerid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"partnerid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"partnerid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"siteid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"siteid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"siteid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"insertedat\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"timestamp\",\"talend.field.dbColumnName\":\"insertedat\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"insertedat\",\"di.column.relatedEntity\":\"\"},{\"name\":\"profileid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"uuid\",\"talend.field.dbColumnName\":\"profileid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"profileid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"endpointid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"uuid\",\"talend.field.dbColumnName\":\"endpointid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"endpointid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"categories\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"map\",\"talend.field.dbColumnName\":\"categories\",\"di.column.talendType\":\"id_Object\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"categories\",\"di.column.relatedEntity\":\"\"},{\"name\":\"clientid\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"text\",\"talend.field.dbColumnName\":\"clientid\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"clientid\",\"di.column.relatedEntity\":\"\"},{\"name\":\"score\",\"type\":[\"int\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"int\",\"talend.field.dbColumnName\":\"score\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"score\",\"di.column.relatedEntity\":\"\"},{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tDBOutput_1\",\"di.table.label\":\"tDBOutput_1\"}"));
 		                    
 		                    props_tDBOutput_1.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tDBOutput_1.additionalColumns.setValue("referenceColumns",
 		                    "partnerid");
 		                    
 		                    java.util.List<Object> tDBOutput_1_fieldOptions_schemaColumns = new java.util.ArrayList<Object>();
 		                    
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("partnerid");
 		                            
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("siteid");
 		                            
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("insertedat");
 		                            
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("profileid");
 		                            
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("endpointid");
 		                            
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("categories");
 		                            
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("clientid");
 		                            
 		                            tDBOutput_1_fieldOptions_schemaColumns.add("score");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_1.fieldOptions).setValue("schemaColumns",tDBOutput_1_fieldOptions_schemaColumns);
 		                    
 		                    java.util.List<Object> tDBOutput_1_fieldOptions_updateKey = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_updateKey.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_1.fieldOptions).setValue("updateKey",tDBOutput_1_fieldOptions_updateKey);
 		                    
 		                    java.util.List<Object> tDBOutput_1_fieldOptions_deletionKey = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_1_fieldOptions_deletionKey.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_1.fieldOptions).setValue("deletionKey",tDBOutput_1_fieldOptions_deletionKey);
 		                    
 		                    java.util.List<Object> tDBOutput_1_fieldOptions_updatable = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_updatable.add(true);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_1.fieldOptions).setValue("updatable",tDBOutput_1_fieldOptions_updatable);
 		                    
 		                    java.util.List<Object> tDBOutput_1_fieldOptions_insertable = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_1_fieldOptions_insertable.add(true);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_1.fieldOptions).setValue("insertable",tDBOutput_1_fieldOptions_insertable);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_1 = props_tDBOutput_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_1.referencedComponent.setReference(referencedComponentProperties_tDBOutput_1);
        }
    }
globalMap.put("tDBOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_1);

java.net.URL mappings_url_tDBOutput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_1_MAPPINGS_URL", mappings_url_tDBOutput_1);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_1 = null;
topology_tDBOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_1 = def_tDBOutput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_1, topology_tDBOutput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_1 = def_tDBOutput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_1 = componentRuntime_tDBOutput_1.initialize(container_tDBOutput_1, props_tDBOutput_1);

if (initVr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_1.getMessage());
}

if(componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_1;
	compDriverInitialization_tDBOutput_1.runAtDriver(container_tDBOutput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_1 = null;
if(componentRuntime_tDBOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_1;
	org.talend.daikon.properties.ValidationResult vr_tDBOutput_1 = sourceOrSink_tDBOutput_1.validate(container_tDBOutput_1);
	if (vr_tDBOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBOutput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Sink sink_tDBOutput_1 =
            (org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_1;
    org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_1 = sink_tDBOutput_1.createWriteOperation();
    writeOperation_tDBOutput_1.initialize(container_tDBOutput_1);
    org.talend.components.api.component.runtime.Writer writer_tDBOutput_1 = writeOperation_tDBOutput_1.createWriter(container_tDBOutput_1);
    writer_tDBOutput_1.open("tDBOutput_1");

    resourceMap.put("writer_tDBOutput_1", writer_tDBOutput_1);

    org.talend.components.api.component.Connector c_tDBOutput_1 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_1.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_1 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_1 = props_tDBOutput_1.getSchema(c_tDBOutput_1, false);
    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_1
            = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_1);
                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_1 = null;


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tCassandraInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tCassandraInput_1", false);
		start_Hash.put("tCassandraInput_1", System.currentTimeMillis());
		
	
	currentComponent="tCassandraInput_1";

	
		int tos_count_tCassandraInput_1 = 0;
		
    	class BytesLimit65535_tCassandraInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCassandraInput_1().limitLog4jByte();
	
	

    	
	
	
        com.datastax.driver.core.Cluster cluster_tCassandraInput_1 = (com.datastax.driver.core.Cluster)globalMap.get("cluster_tCassandraConnection_2");
    	com.datastax.driver.core.Session connection_tCassandraInput_1 = (com.datastax.driver.core.Session)globalMap.get("connection_tCassandraConnection_2");
	
	com.datastax.driver.core.ResultSet rs_tCassandraInput_1 = connection_tCassandraInput_1.execute("Select    PartnerId,   SiteId,   insertedat,   ProfileId,   EndPointId,  toJson(Categories)   AS Categories,   ClientId,   Score   FROM profiling_service_db.profile_risk_history  WHERE insertedat>='"+globalMap.get("CollectionstartDate") + "' AND    insertedat<'"+globalMap.get("CollectionEndDate") + "' ALLOW FILTERING;");
	int nb_line_tCassandraInput_1 = 0;
	for(com.datastax.driver.core.Row row_tCassandraInput_1 : rs_tCassandraInput_1){
			if(row_tCassandraInput_1.isNull("\"partnerid\"")){
				row1.partnerid = null;
			}else{
				
	    				row1.partnerid = row_tCassandraInput_1.getString("\"partnerid\"");
	    			
	    	}		
	    
			if(row_tCassandraInput_1.isNull("\"siteid\"")){
				row1.siteid = null;
			}else{
				
	    				row1.siteid = row_tCassandraInput_1.getString("\"siteid\"");
	    			
	    	}		
	    
			if(row_tCassandraInput_1.isNull("\"insertedat\"")){
				row1.insertedat = null;
			}else{
				
	        			row1.insertedat = row_tCassandraInput_1.getTimestamp("\"insertedat\"");	
	        		
	    	}		
	    
			if(row_tCassandraInput_1.isNull("\"profileid\"")){
				row1.profileid = null;
			}else{
				
	    				row1.profileid = row_tCassandraInput_1.getUUID("\"profileid\"").toString();
	    			
	    	}		
	    
			if(row_tCassandraInput_1.isNull("\"endpointid\"")){
				row1.endpointid = null;
			}else{
				
	    				row1.endpointid = row_tCassandraInput_1.getUUID("\"endpointid\"").toString();
	    			
	    	}		
	    
			if(row_tCassandraInput_1.isNull("\"categories\"")){
				row1.categories = null;
			}else{
				
	    				row1.categories = row_tCassandraInput_1.getObject("\"categories\"");
	    			
	    	}		
	    
			if(row_tCassandraInput_1.isNull("\"clientid\"")){
				row1.clientid = null;
			}else{
				
	    				row1.clientid = row_tCassandraInput_1.getString("\"clientid\"");
	    			
	    	}		
	    
			if(row_tCassandraInput_1.isNull("\"score\"")){
				row1.score = null;
			}else{
				 
	        		row1.score = row_tCassandraInput_1.getInt("\"score\"");	
	        	
	    	}		
	    
        nb_line_tCassandraInput_1++;
    

 



/**
 * [tCassandraInput_1 begin ] stop
 */
	
	/**
	 * [tCassandraInput_1 main ] start
	 */

	

	
	
	currentComponent="tCassandraInput_1";

	

 


	tos_count_tCassandraInput_1++;

/**
 * [tCassandraInput_1 main ] stop
 */
	
	/**
	 * [tCassandraInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCassandraInput_1";

	

 



/**
 * [tCassandraInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

            incomingEnforcer_tDBOutput_1.createNewRecord();
                    incomingEnforcer_tDBOutput_1.put("partnerid", row1.partnerid);
                    incomingEnforcer_tDBOutput_1.put("siteid", row1.siteid);
                    incomingEnforcer_tDBOutput_1.put("insertedat", row1.insertedat);
                    incomingEnforcer_tDBOutput_1.put("profileid", row1.profileid);
                    incomingEnforcer_tDBOutput_1.put("endpointid", row1.endpointid);
                    incomingEnforcer_tDBOutput_1.put("categories", row1.categories);
                    incomingEnforcer_tDBOutput_1.put("clientid", row1.clientid);
                    incomingEnforcer_tDBOutput_1.put("score", row1.score);
            org.apache.avro.generic.IndexedRecord data_tDBOutput_1 = incomingEnforcer_tDBOutput_1.getCurrentRecord();
            

            writer_tDBOutput_1.write(data_tDBOutput_1);
            
            nb_line_tDBOutput_1++;

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	


 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	


 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tCassandraInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tCassandraInput_1";

	

 



/**
 * [tCassandraInput_1 process_data_end ] stop
 */
	
	/**
	 * [tCassandraInput_1 end ] start
	 */

	

	
	
	currentComponent="tCassandraInput_1";

	
	
	

    	
	}
	globalMap.put("tCassandraInput_1_NB_LINE", nb_line_tCassandraInput_1);
    

 

ok_Hash.put("tCassandraInput_1", true);
end_Hash.put("tCassandraInput_1", System.currentTimeMillis());




/**
 * [tCassandraInput_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
// end of generic


resourceMap.put("finish_tDBOutput_1", Boolean.TRUE);

    org.talend.components.api.component.runtime.Result resultObject_tDBOutput_1 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_1.close();
    final java.util.Map<String, Object> resultMap_tDBOutput_1 = writer_tDBOutput_1.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_1), container_tDBOutput_1);
if(resultMap_tDBOutput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_1 : resultMap_tDBOutput_1.entrySet()) {
		switch(entry_tDBOutput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "ERROR_MESSAGE", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_LINE", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_SUCCESS", entry_tDBOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_1.setComponentData("tDBOutput_1", "NB_REJECT", entry_tDBOutput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_1 = new StringBuilder();
            for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < entry_tDBOutput_1.getKey().length(); i_tDBOutput_1++) {
                char ch_tDBOutput_1 = entry_tDBOutput_1.getKey().charAt(i_tDBOutput_1);
                if(Character.isUpperCase(ch_tDBOutput_1) && i_tDBOutput_1> 0) {
                	studio_key_tDBOutput_1.append('_');
                }
                studio_key_tDBOutput_1.append(ch_tDBOutput_1);
            }
			container_tDBOutput_1.setComponentData("tDBOutput_1", studio_key_tDBOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_1.getValue());
			break;
		}
	}
}

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tCassandraInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCassandraInput_1 finally ] start
	 */

	

	
	
	currentComponent="tCassandraInput_1";

	

 



/**
 * [tCassandraInput_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
// finally of generic


if(resourceMap.get("finish_tDBOutput_1")==null){
    if(resourceMap.get("writer_tDBOutput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_1")).close();
		} catch (java.io.IOException e_tDBOutput_1) {
			String errorMessage_tDBOutput_1 = "failed to release the resource in tDBOutput_1 :" + e_tDBOutput_1.getMessage();
			System.err.println(errorMessage_tDBOutput_1);
		}
	}
}
 



/**
 * [tDBOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCassandraInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";

	
		int tos_count_tDBRow_2 = 0;
		
    	class BytesLimit65535_tDBRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_2().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_2 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_2 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_2.createRuntimeProperties();
 		                    props_tDBRow_2.setValue("sql",
 		                    "UPDATE SRC.Staging_Profile_Risk_History  SET Categories_JSON=PARSE_Json(Categories)");
 		                    
 		                    props_tDBRow_2.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_2.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_2.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_2.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_2.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_2.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_2.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_2.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_2.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_2.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_2.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_2.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_2 = props_tDBRow_2.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_2.referencedComponent.setReference(referencedComponentProperties_tDBRow_2);
        }
    }
globalMap.put("tDBRow_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_2);

java.net.URL mappings_url_tDBRow_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_2_MAPPINGS_URL", mappings_url_tDBRow_2);

org.talend.components.api.container.RuntimeContainer container_tDBRow_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_2 = null;
topology_tDBRow_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_2 = def_tDBRow_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_2, topology_tDBRow_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_2 = def_tDBRow_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_2 = componentRuntime_tDBRow_2.initialize(container_tDBRow_2, props_tDBRow_2);

if (initVr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_2.getMessage());
}

if(componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_2;
	compDriverInitialization_tDBRow_2.runAtDriver(container_tDBRow_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_2 = null;
if(componentRuntime_tDBRow_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_2;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_2 = sourceOrSink_tDBRow_2.validate(container_tDBRow_2);
	if (vr_tDBRow_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_2.getMessage());
	}
}

 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	


 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	


 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	


 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	
// end of generic


resourceMap.put("finish_tDBRow_2", Boolean.TRUE);

 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBRow_10Process(globalMap);



/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_2")==null){
}
 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_10", false);
		start_Hash.put("tDBRow_10", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_10";

	
		int tos_count_tDBRow_10 = 0;
		
    	class BytesLimit65535_tDBRow_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_10().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_10 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_10 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_10.createRuntimeProperties();
 		                    props_tDBRow_10.setValue("sql",
 		                    "Truncate Table SRC.Security_Profile_Risk_History");
 		                    
 		                    props_tDBRow_10.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_10.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_10.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_10.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_10.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_10.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_10.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_10.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_10.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_10.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_10.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_10.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_10.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_10 = props_tDBRow_10.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_10 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_10 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_10 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_10.referencedComponent.setReference(referencedComponentProperties_tDBRow_10);
        }
    }
globalMap.put("tDBRow_10_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_10);

java.net.URL mappings_url_tDBRow_10= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_10_MAPPINGS_URL", mappings_url_tDBRow_10);

org.talend.components.api.container.RuntimeContainer container_tDBRow_10 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_10";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_10 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_10 = null;
topology_tDBRow_10 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_10 = def_tDBRow_10.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_10, topology_tDBRow_10);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_10 = def_tDBRow_10.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_10 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_10.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_10 = componentRuntime_tDBRow_10.initialize(container_tDBRow_10, props_tDBRow_10);

if (initVr_tDBRow_10.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_10.getMessage());
}

if(componentRuntime_tDBRow_10 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_10 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_10;
	compDriverInitialization_tDBRow_10.runAtDriver(container_tDBRow_10);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_10 = null;
if(componentRuntime_tDBRow_10 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_10 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_10;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_10 = sourceOrSink_tDBRow_10.validate(container_tDBRow_10);
	if (vr_tDBRow_10.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_10.getMessage());
	}
}

 



/**
 * [tDBRow_10 begin ] stop
 */
	
	/**
	 * [tDBRow_10 main ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	


 


	tos_count_tDBRow_10++;

/**
 * [tDBRow_10 main ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	


 



/**
 * [tDBRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	


 



/**
 * [tDBRow_10 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_10 end ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	
// end of generic


resourceMap.put("finish_tDBRow_10", Boolean.TRUE);

 

ok_Hash.put("tDBRow_10", true);
end_Hash.put("tDBRow_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tDBRow_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_10 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_10";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_10")==null){
}
 



/**
 * [tDBRow_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_10_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Category_State;

				public String getCategory_State () {
					return this.Category_State;
				}
				
			    public String Category_State_Value;

				public String getCategory_State_Value () {
					return this.Category_State_Value;
				}
				
			    public String Category_Label;

				public String getCategory_Label () {
					return this.Category_Label;
				}
				
			    public String ExecutionResult;

				public String getExecutionResult () {
					return this.ExecutionResult;
				}
				
			    public String ExecutionStatus;

				public String getExecutionStatus () {
					return this.ExecutionStatus;
				}
				
			    public java.util.Date UpdatedAt;

				public java.util.Date getUpdatedAt () {
					return this.UpdatedAt;
				}
				
			    public String PartnerId;

				public String getPartnerId () {
					return this.PartnerId;
				}
				
			    public String SiteId;

				public String getSiteId () {
					return this.SiteId;
				}
				
			    public java.util.Date InserteDat;

				public java.util.Date getInserteDat () {
					return this.InserteDat;
				}
				
			    public String ProfileId;

				public String getProfileId () {
					return this.ProfileId;
				}
				
			    public String ENDPOINTID;

				public String getENDPOINTID () {
					return this.ENDPOINTID;
				}
				
			    public String ClientId;

				public String getClientId () {
					return this.ClientId;
				}
				
			    public Long Score;

				public Long getScore () {
					return this.Score;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Category_State = readString(dis);
					
					this.Category_State_Value = readString(dis);
					
					this.Category_Label = readString(dis);
					
					this.ExecutionResult = readString(dis);
					
					this.ExecutionStatus = readString(dis);
					
					this.UpdatedAt = readDate(dis);
					
					this.PartnerId = readString(dis);
					
					this.SiteId = readString(dis);
					
					this.InserteDat = readDate(dis);
					
					this.ProfileId = readString(dis);
					
					this.ENDPOINTID = readString(dis);
					
					this.ClientId = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Score = null;
           				} else {
           			    	this.Score = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Category_State,dos);
					
					// String
				
						writeString(this.Category_State_Value,dos);
					
					// String
				
						writeString(this.Category_Label,dos);
					
					// String
				
						writeString(this.ExecutionResult,dos);
					
					// String
				
						writeString(this.ExecutionStatus,dos);
					
					// java.util.Date
				
						writeDate(this.UpdatedAt,dos);
					
					// String
				
						writeString(this.PartnerId,dos);
					
					// String
				
						writeString(this.SiteId,dos);
					
					// java.util.Date
				
						writeDate(this.InserteDat,dos);
					
					// String
				
						writeString(this.ProfileId,dos);
					
					// String
				
						writeString(this.ENDPOINTID,dos);
					
					// String
				
						writeString(this.ClientId,dos);
					
					// Long
				
						if(this.Score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Score);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Category_State="+Category_State);
		sb.append(",Category_State_Value="+Category_State_Value);
		sb.append(",Category_Label="+Category_Label);
		sb.append(",ExecutionResult="+ExecutionResult);
		sb.append(",ExecutionStatus="+ExecutionStatus);
		sb.append(",UpdatedAt="+String.valueOf(UpdatedAt));
		sb.append(",PartnerId="+PartnerId);
		sb.append(",SiteId="+SiteId);
		sb.append(",InserteDat="+String.valueOf(InserteDat));
		sb.append(",ProfileId="+ProfileId);
		sb.append(",ENDPOINTID="+ENDPOINTID);
		sb.append(",ClientId="+ClientId);
		sb.append(",Score="+String.valueOf(Score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_1 = 0;
		
    	class BytesLimit65535_tHashOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashOutput_1().limitLog4jByte();



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_Load_Profile_Risk_History_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
    	class BytesLimit65535_tDBInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_1().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBInput_1 =
        new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tDBInput_1 =
        (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tDBInput_1.createRuntimeProperties();
 		                    props_tDBInput_1.setValue("sql",
 		                    "Select Id, REPLACE(Key,'\"','') Category_State, value Category_State_Value, Category_Label, ExecutionResult, ExecutionStatus, To_Timestamp_LTZ(UpdatedAt) AS UpdatedAt, PartnerId,  SiteId, To_Timestamp_LTZ(InserteDat) AS InserteDat, ProfileId, ENDPOINTID, ClientId, Score FROM ( Select  Id, Key AS Category_Label, PARSE_Json(Replace('{\\\"root\\\" : ' ||  value:ExecutionDetails || '}','\\\\\"','')) ExecutionDetails, value:ExecutionResult ExecutionResult, value:ExecutionStatus ExecutionStatus, value:UpdatedAt UpdatedAt, PartnerId,  SiteId, InserteDat, ProfileId, ENDPOINTID, ClientId, Score FROM  ( select  Id, PARSE_Json(Replace('{\\\"root\\\" : ' ||  Categories_Json || '}','\\\\\"','')) AS Categories_Json, PartnerId, SiteId,InserteDat,ProfileId,ENDPOINTID,ClientId,Score from SRC.Staging_Profile_Risk_History )  S , lateral flatten( input => Categories_Json:root ) ) S1 , lateral flatten( input => ExecutionDetails:root );");
 		                    
 		                    props_tDBInput_1.setValue("useCursor",
 		                    false);
 		                    
 		                    props_tDBInput_1.setValue("trimStringOrCharColumns",
 		                    false);
 		                    
 		                    props_tDBInput_1.setValue("enableDBMapping",
 		                    false);
 		                    
 		                    props_tDBInput_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBInput_1.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBInput_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBInput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBInput_1.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MAIN\",\"fields\":[{\"name\":\"Id\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_State\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_State\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_State\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_State_Value\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_State_Value\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_State_Value\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Label\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Label\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Label\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ExecutionResult\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ExecutionResult\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExecutionResult\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ExecutionStatus\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ExecutionStatus\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExecutionStatus\",\"di.column.relatedEntity\":\"\"},{\"name\":\"UpdatedAt\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"UpdatedAt\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"UpdatedAt\",\"di.column.relatedEntity\":\"\"},{\"name\":\"PartnerId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"PartnerId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PartnerId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"SiteId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"SiteId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SiteId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"InserteDat\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"InserteDat\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"InserteDat\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ProfileId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ProfileId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ProfileId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ENDPOINTID\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ENDPOINTID\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ENDPOINTID\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ClientId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ClientId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ClientId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Score\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Score\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Score\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}"));
 		                    
 		                    props_tDBInput_1.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    java.util.List<Object> tDBInput_1_trimTable_trim = new java.util.ArrayList<Object>();
 		                    
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                                tDBInput_1_trimTable_trim.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_1.trimTable).setValue("trim",tDBInput_1_trimTable_trim);
 		                    
 		                    java.util.List<Object> tDBInput_1_trimTable_columnName = new java.util.ArrayList<Object>();
 		                    
 		                            tDBInput_1_trimTable_columnName.add("Id");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("Category_State");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("Category_State_Value");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("Category_Label");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("ExecutionResult");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("ExecutionStatus");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("UpdatedAt");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("PartnerId");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("SiteId");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("InserteDat");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("ProfileId");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("ENDPOINTID");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("ClientId");
 		                            
 		                            tDBInput_1_trimTable_columnName.add("Score");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_1.trimTable).setValue("columnName",tDBInput_1_trimTable_columnName);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBInput_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBInput_1 = props_tDBInput_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBInput_1.referencedComponent.setReference(referencedComponentProperties_tDBInput_1);
        }
    }
globalMap.put("tDBInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBInput_1);

java.net.URL mappings_url_tDBInput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBInput_1_MAPPINGS_URL", mappings_url_tDBInput_1);

org.talend.components.api.container.RuntimeContainer container_tDBInput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBInput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBInput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBInput_1 = null;
topology_tDBInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBInput_1 = def_tDBInput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBInput_1, topology_tDBInput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBInput_1 = def_tDBInput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBInput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBInput_1 = componentRuntime_tDBInput_1.initialize(container_tDBInput_1, props_tDBInput_1);

if (initVr_tDBInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBInput_1.getMessage());
}

if(componentRuntime_tDBInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBInput_1;
	compDriverInitialization_tDBInput_1.runAtDriver(container_tDBInput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBInput_1 = null;
if(componentRuntime_tDBInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBInput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBInput_1;
	org.talend.daikon.properties.ValidationResult vr_tDBInput_1 = sourceOrSink_tDBInput_1.validate(container_tDBInput_1);
	if (vr_tDBInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBInput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tDBInput_1 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tDBInput_1;
    org.talend.components.api.component.runtime.Reader reader_tDBInput_1 =
            source_tDBInput_1.createReader(container_tDBInput_1);
	reader_tDBInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tDBInput_1, container_tDBInput_1);

        boolean multi_output_is_allowed_tDBInput_1 = false;
        org.talend.components.api.component.Connector c_tDBInput_1 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tDBInput_1.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tDBInput_1 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tDBInput_1 = true;
            }
        }
        org.apache.avro.Schema schema_tDBInput_1 = props_tDBInput_1.getSchema(c_tDBInput_1, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBInput_1 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tDBInput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBInput_1 = null;

    // Iterate through the incoming data.
    boolean available_tDBInput_1 = reader_tDBInput_1.start();

    resourceMap.put("reader_tDBInput_1", reader_tDBInput_1);

    for (; available_tDBInput_1; available_tDBInput_1 = reader_tDBInput_1.advance()) {
    	nb_line_tDBInput_1++;

    	
        if (multi_output_is_allowed_tDBInput_1) {
                row2 = null;

        }

        try {
            Object data_tDBInput_1 = reader_tDBInput_1.getCurrent();

                if(multi_output_is_allowed_tDBInput_1) {
                    row2 = new row2Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tDBInput_1 == null) {
            factory_tDBInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tDBInput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tDBInput_1.setWrapped(factory_tDBInput_1.convertToAvro(data_tDBInput_1));
                Object columnValue_0_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(0);
                        row2.Id = (Long) (columnValue_0_tDBInput_1);
                Object columnValue_1_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(1);
                        row2.Category_State = (String) (columnValue_1_tDBInput_1);
                Object columnValue_2_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(2);
                        row2.Category_State_Value = (String) (columnValue_2_tDBInput_1);
                Object columnValue_3_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(3);
                        row2.Category_Label = (String) (columnValue_3_tDBInput_1);
                Object columnValue_4_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(4);
                        row2.ExecutionResult = (String) (columnValue_4_tDBInput_1);
                Object columnValue_5_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(5);
                        row2.ExecutionStatus = (String) (columnValue_5_tDBInput_1);
                Object columnValue_6_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(6);
                        row2.UpdatedAt = (java.util.Date) (columnValue_6_tDBInput_1);
                Object columnValue_7_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(7);
                        row2.PartnerId = (String) (columnValue_7_tDBInput_1);
                Object columnValue_8_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(8);
                        row2.SiteId = (String) (columnValue_8_tDBInput_1);
                Object columnValue_9_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(9);
                        row2.InserteDat = (java.util.Date) (columnValue_9_tDBInput_1);
                Object columnValue_10_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(10);
                        row2.ProfileId = (String) (columnValue_10_tDBInput_1);
                Object columnValue_11_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(11);
                        row2.ENDPOINTID = (String) (columnValue_11_tDBInput_1);
                Object columnValue_12_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(12);
                        row2.ClientId = (String) (columnValue_12_tDBInput_1);
                Object columnValue_13_tDBInput_1 = outgoingEnforcer_tDBInput_1.get(13);
                        row2.Score = (Long) (columnValue_13_tDBInput_1);
        } catch (org.talend.components.api.exception.DataRejectException e_tDBInput_1) {
        	java.util.Map<String,Object> info_tDBInput_1 = e_tDBInput_1.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tDBInput_1 = null;
            	if(info_tDBInput_1.containsKey("error")){
            		errorMessage_tDBInput_1 = info_tDBInput_1.get("error");
        		}else if(info_tDBInput_1.containsKey("errorMessage")){
            		errorMessage_tDBInput_1 = info_tDBInput_1.get("errorMessage");
        		}else{
        			errorMessage_tDBInput_1 = "Rejected but error message missing";
        		}
        		errorMessage_tDBInput_1 = "Row "+ nb_line_tDBInput_1 + ": "+errorMessage_tDBInput_1;
    			System.err.println(errorMessage_tDBInput_1);
            	// If the record is reject, the main line record should put NULL
            	row2 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tDBInput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBInput_1 = null;


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	


 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	


 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		



    
		row2Struct oneRow_tHashOutput_1 = new row2Struct();
				
					oneRow_tHashOutput_1.Id = row2.Id;
					oneRow_tHashOutput_1.Category_State = row2.Category_State;
					oneRow_tHashOutput_1.Category_State_Value = row2.Category_State_Value;
					oneRow_tHashOutput_1.Category_Label = row2.Category_Label;
					oneRow_tHashOutput_1.ExecutionResult = row2.ExecutionResult;
					oneRow_tHashOutput_1.ExecutionStatus = row2.ExecutionStatus;
					oneRow_tHashOutput_1.UpdatedAt = row2.UpdatedAt;
					oneRow_tHashOutput_1.PartnerId = row2.PartnerId;
					oneRow_tHashOutput_1.SiteId = row2.SiteId;
					oneRow_tHashOutput_1.InserteDat = row2.InserteDat;
					oneRow_tHashOutput_1.ProfileId = row2.ProfileId;
					oneRow_tHashOutput_1.ENDPOINTID = row2.ENDPOINTID;
					oneRow_tHashOutput_1.ClientId = row2.ClientId;
					oneRow_tHashOutput_1.Score = row2.Score;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	


 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	
// end of generic


resourceMap.put("finish_tDBInput_1", Boolean.TRUE);

    } // while
    reader_tDBInput_1.close();
    final java.util.Map<String, Object> resultMap_tDBInput_1 = reader_tDBInput_1.getReturnValues();
if(resultMap_tDBInput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBInput_1 : resultMap_tDBInput_1.entrySet()) {
		switch(entry_tDBInput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBInput_1.setComponentData("tDBInput_1", "ERROR_MESSAGE", entry_tDBInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBInput_1.setComponentData("tDBInput_1", "NB_LINE", entry_tDBInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBInput_1.setComponentData("tDBInput_1", "NB_SUCCESS", entry_tDBInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBInput_1.setComponentData("tDBInput_1", "NB_REJECT", entry_tDBInput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tDBInput_1 = new StringBuilder();
            for (int i_tDBInput_1 = 0; i_tDBInput_1 < entry_tDBInput_1.getKey().length(); i_tDBInput_1++) {
                char ch_tDBInput_1 = entry_tDBInput_1.getKey().charAt(i_tDBInput_1);
                if(Character.isUpperCase(ch_tDBInput_1) && i_tDBInput_1> 0) {
                	studio_key_tDBInput_1.append('_');
                }
                studio_key_tDBInput_1.append(ch_tDBInput_1);
            }
			container_tDBInput_1.setComponentData("tDBInput_1", studio_key_tDBInput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBInput_1.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	
// finally of generic


if(resourceMap.get("finish_tDBInput_1")==null){
    if(resourceMap.get("reader_tDBInput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tDBInput_1")).close();
		} catch (java.io.IOException e_tDBInput_1) {
			String errorMessage_tDBInput_1 = "failed to release the resource in tDBInput_1 :" + e_tDBInput_1.getMessage();
			System.err.println(errorMessage_tDBInput_1);
		}
	}
}
 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Category_State;

				public String getCategory_State () {
					return this.Category_State;
				}
				
			    public String Category_State_Value;

				public String getCategory_State_Value () {
					return this.Category_State_Value;
				}
				
			    public String Category_Label;

				public String getCategory_Label () {
					return this.Category_Label;
				}
				
			    public String ExecutionResult;

				public String getExecutionResult () {
					return this.ExecutionResult;
				}
				
			    public String ExecutionStatus;

				public String getExecutionStatus () {
					return this.ExecutionStatus;
				}
				
			    public java.util.Date UpdatedAt;

				public java.util.Date getUpdatedAt () {
					return this.UpdatedAt;
				}
				
			    public String PartnerId;

				public String getPartnerId () {
					return this.PartnerId;
				}
				
			    public String SiteId;

				public String getSiteId () {
					return this.SiteId;
				}
				
			    public java.util.Date InserteDat;

				public java.util.Date getInserteDat () {
					return this.InserteDat;
				}
				
			    public String ProfileId;

				public String getProfileId () {
					return this.ProfileId;
				}
				
			    public String ENDPOINTID;

				public String getENDPOINTID () {
					return this.ENDPOINTID;
				}
				
			    public String ClientId;

				public String getClientId () {
					return this.ClientId;
				}
				
			    public Long Score;

				public Long getScore () {
					return this.Score;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Category_State = readString(dis);
					
					this.Category_State_Value = readString(dis);
					
					this.Category_Label = readString(dis);
					
					this.ExecutionResult = readString(dis);
					
					this.ExecutionStatus = readString(dis);
					
					this.UpdatedAt = readDate(dis);
					
					this.PartnerId = readString(dis);
					
					this.SiteId = readString(dis);
					
					this.InserteDat = readDate(dis);
					
					this.ProfileId = readString(dis);
					
					this.ENDPOINTID = readString(dis);
					
					this.ClientId = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Score = null;
           				} else {
           			    	this.Score = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Category_State,dos);
					
					// String
				
						writeString(this.Category_State_Value,dos);
					
					// String
				
						writeString(this.Category_Label,dos);
					
					// String
				
						writeString(this.ExecutionResult,dos);
					
					// String
				
						writeString(this.ExecutionStatus,dos);
					
					// java.util.Date
				
						writeDate(this.UpdatedAt,dos);
					
					// String
				
						writeString(this.PartnerId,dos);
					
					// String
				
						writeString(this.SiteId,dos);
					
					// java.util.Date
				
						writeDate(this.InserteDat,dos);
					
					// String
				
						writeString(this.ProfileId,dos);
					
					// String
				
						writeString(this.ENDPOINTID,dos);
					
					// String
				
						writeString(this.ClientId,dos);
					
					// Long
				
						if(this.Score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Score);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Category_State="+Category_State);
		sb.append(",Category_State_Value="+Category_State_Value);
		sb.append(",Category_Label="+Category_Label);
		sb.append(",ExecutionResult="+ExecutionResult);
		sb.append(",ExecutionStatus="+ExecutionStatus);
		sb.append(",UpdatedAt="+String.valueOf(UpdatedAt));
		sb.append(",PartnerId="+PartnerId);
		sb.append(",SiteId="+SiteId);
		sb.append(",InserteDat="+String.valueOf(InserteDat));
		sb.append(",ProfileId="+ProfileId);
		sb.append(",ENDPOINTID="+ENDPOINTID);
		sb.append(",ClientId="+ClientId);
		sb.append(",Score="+String.valueOf(Score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHashOutput_2 = 0;
		
    	class BytesLimit65535_tHashOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashOutput_2().limitLog4jByte();



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_2 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_2.getKeyMap().put("tHashFile_Load_Profile_Risk_History_" +pid + "_tHashOutput_2", "tHashFile_Load_Profile_Risk_History_" + pid + "_tHashOutput_1");
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
    	class BytesLimit65535_tDBInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_3().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBInput_3 =
        new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tDBInput_3 =
        (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tDBInput_3.createRuntimeProperties();
 		                    props_tDBInput_3.setValue("sql",
 		                    "Select  Id, REPLACE(value:key,'\"','') Category_State, value:value Category_State_Value, Category_Label, ExecutionResult, ExecutionStatus, To_Timestamp_LTZ(UpdatedAt) AS UpdatedAt, PartnerId,  SiteId, To_Timestamp_LTZ(InserteDat) AS InserteDat, ProfileId, ENDPOINTID, ClientId, Score FROM ( Select   Id, Category_Label, vm.value ExecutionResult, Parse_Json('{\"root\" : ' || LAG(vm.value) OVER(Partition BY vm.SEQ,ID,Category_Label Order BY vm.key) || '}') Executiondetails, ExecutionStatus, UpdatedAt, PartnerId,  SiteId, InserteDat, ProfileId, ENDPOINTID, ClientId, Score, vm.key FROM ( Select  Parse_Json(CAST(regexp_replace(Replace(REPLACE(ExecutionResult,'\\\\',''),'''','\"'),'\\r\\n','') AS NVARCHAR))  ExecutionResult_Json, * FROM ( Select  Id, Key AS Category_Label, value:ExecutionDetails ExecutionDetails, '{\"root\" : ' || Replace((value:ExecutionResult),'\\\\''','\"') || '}' ExecutionResult, value:ExecutionStatus ExecutionStatus, value:UpdatedAt UpdatedAt, PartnerId,  SiteId, InserteDat, ProfileId, ENDPOINTID, ClientId, Score FROM  ( select  PARSE_Json(Replace('{\\\"root\\\" : ' ||  Categories_Json || '}','\\\\\"','')) AS Categories_Json,Categories, Id,PartnerId, SiteId,InserteDat,ProfileId,ENDPOINTID,ClientId,Score from SRC.Staging_Profile_Risk_History )  BaseQuery , lateral flatten( input => Categories_Json:root ) ) JsonRootParse WHERE IFNULL(ExecutionDetails,'')=''  ) JsonResultParse , lateral flatten( input => ExecutionResult_Json:root ) vm ) JsonFilter , lateral flatten( input => Executiondetails:root ) ve WHERE JsonFilter.Key='result'");
 		                    
 		                    props_tDBInput_3.setValue("useCursor",
 		                    false);
 		                    
 		                    props_tDBInput_3.setValue("trimStringOrCharColumns",
 		                    false);
 		                    
 		                    props_tDBInput_3.setValue("enableDBMapping",
 		                    false);
 		                    
 		                    props_tDBInput_3.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBInput_3.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBInput_3.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBInput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBInput_3.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MAIN\",\"fields\":[{\"name\":\"Id\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_State\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_State\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_State\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_State_Value\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_State_Value\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_State_Value\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Label\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Label\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Label\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ExecutionResult\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ExecutionResult\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExecutionResult\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ExecutionStatus\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ExecutionStatus\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExecutionStatus\",\"di.column.relatedEntity\":\"\"},{\"name\":\"UpdatedAt\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"UpdatedAt\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"UpdatedAt\",\"di.column.relatedEntity\":\"\"},{\"name\":\"PartnerId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"PartnerId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PartnerId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"SiteId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"SiteId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SiteId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"InserteDat\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"InserteDat\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"InserteDat\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ProfileId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ProfileId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ProfileId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ENDPOINTID\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ENDPOINTID\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ENDPOINTID\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ClientId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ClientId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ClientId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Score\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Score\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Score\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}"));
 		                    
 		                    props_tDBInput_3.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    java.util.List<Object> tDBInput_3_trimTable_trim = new java.util.ArrayList<Object>();
 		                    
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                                tDBInput_3_trimTable_trim.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_3.trimTable).setValue("trim",tDBInput_3_trimTable_trim);
 		                    
 		                    java.util.List<Object> tDBInput_3_trimTable_columnName = new java.util.ArrayList<Object>();
 		                    
 		                            tDBInput_3_trimTable_columnName.add("Id");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("Category_State");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("Category_State_Value");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("Category_Label");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("ExecutionResult");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("ExecutionStatus");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("UpdatedAt");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("PartnerId");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("SiteId");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("InserteDat");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("ProfileId");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("ENDPOINTID");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("ClientId");
 		                            
 		                            tDBInput_3_trimTable_columnName.add("Score");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_3.trimTable).setValue("columnName",tDBInput_3_trimTable_columnName);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBInput_3.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBInput_3 = props_tDBInput_3.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBInput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBInput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBInput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBInput_3.referencedComponent.setReference(referencedComponentProperties_tDBInput_3);
        }
    }
globalMap.put("tDBInput_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBInput_3);

java.net.URL mappings_url_tDBInput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBInput_3_MAPPINGS_URL", mappings_url_tDBInput_3);

org.talend.components.api.container.RuntimeContainer container_tDBInput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBInput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBInput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBInput_3 = null;
topology_tDBInput_3 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBInput_3 = def_tDBInput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBInput_3, topology_tDBInput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBInput_3 = def_tDBInput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBInput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBInput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBInput_3 = componentRuntime_tDBInput_3.initialize(container_tDBInput_3, props_tDBInput_3);

if (initVr_tDBInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBInput_3.getMessage());
}

if(componentRuntime_tDBInput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBInput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBInput_3;
	compDriverInitialization_tDBInput_3.runAtDriver(container_tDBInput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBInput_3 = null;
if(componentRuntime_tDBInput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBInput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBInput_3;
	org.talend.daikon.properties.ValidationResult vr_tDBInput_3 = sourceOrSink_tDBInput_3.validate(container_tDBInput_3);
	if (vr_tDBInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBInput_3.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tDBInput_3 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tDBInput_3;
    org.talend.components.api.component.runtime.Reader reader_tDBInput_3 =
            source_tDBInput_3.createReader(container_tDBInput_3);
	reader_tDBInput_3 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tDBInput_3, container_tDBInput_3);

        boolean multi_output_is_allowed_tDBInput_3 = false;
        org.talend.components.api.component.Connector c_tDBInput_3 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tDBInput_3.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tDBInput_3 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tDBInput_3 = true;
            }
        }
        org.apache.avro.Schema schema_tDBInput_3 = props_tDBInput_3.getSchema(c_tDBInput_3, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBInput_3 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tDBInput_3, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBInput_3 = null;

    // Iterate through the incoming data.
    boolean available_tDBInput_3 = reader_tDBInput_3.start();

    resourceMap.put("reader_tDBInput_3", reader_tDBInput_3);

    for (; available_tDBInput_3; available_tDBInput_3 = reader_tDBInput_3.advance()) {
    	nb_line_tDBInput_3++;

    	
        if (multi_output_is_allowed_tDBInput_3) {
                row5 = null;

        }

        try {
            Object data_tDBInput_3 = reader_tDBInput_3.getCurrent();

                if(multi_output_is_allowed_tDBInput_3) {
                    row5 = new row5Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tDBInput_3 == null) {
            factory_tDBInput_3 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tDBInput_3.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tDBInput_3.setWrapped(factory_tDBInput_3.convertToAvro(data_tDBInput_3));
                Object columnValue_0_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(0);
                        row5.Id = (Long) (columnValue_0_tDBInput_3);
                Object columnValue_1_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(1);
                        row5.Category_State = (String) (columnValue_1_tDBInput_3);
                Object columnValue_2_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(2);
                        row5.Category_State_Value = (String) (columnValue_2_tDBInput_3);
                Object columnValue_3_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(3);
                        row5.Category_Label = (String) (columnValue_3_tDBInput_3);
                Object columnValue_4_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(4);
                        row5.ExecutionResult = (String) (columnValue_4_tDBInput_3);
                Object columnValue_5_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(5);
                        row5.ExecutionStatus = (String) (columnValue_5_tDBInput_3);
                Object columnValue_6_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(6);
                        row5.UpdatedAt = (java.util.Date) (columnValue_6_tDBInput_3);
                Object columnValue_7_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(7);
                        row5.PartnerId = (String) (columnValue_7_tDBInput_3);
                Object columnValue_8_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(8);
                        row5.SiteId = (String) (columnValue_8_tDBInput_3);
                Object columnValue_9_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(9);
                        row5.InserteDat = (java.util.Date) (columnValue_9_tDBInput_3);
                Object columnValue_10_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(10);
                        row5.ProfileId = (String) (columnValue_10_tDBInput_3);
                Object columnValue_11_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(11);
                        row5.ENDPOINTID = (String) (columnValue_11_tDBInput_3);
                Object columnValue_12_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(12);
                        row5.ClientId = (String) (columnValue_12_tDBInput_3);
                Object columnValue_13_tDBInput_3 = outgoingEnforcer_tDBInput_3.get(13);
                        row5.Score = (Long) (columnValue_13_tDBInput_3);
        } catch (org.talend.components.api.exception.DataRejectException e_tDBInput_3) {
        	java.util.Map<String,Object> info_tDBInput_3 = e_tDBInput_3.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tDBInput_3 = null;
            	if(info_tDBInput_3.containsKey("error")){
            		errorMessage_tDBInput_3 = info_tDBInput_3.get("error");
        		}else if(info_tDBInput_3.containsKey("errorMessage")){
            		errorMessage_tDBInput_3 = info_tDBInput_3.get("errorMessage");
        		}else{
        			errorMessage_tDBInput_3 = "Rejected but error message missing";
        		}
        		errorMessage_tDBInput_3 = "Row "+ nb_line_tDBInput_3 + ": "+errorMessage_tDBInput_3;
    			System.err.println(errorMessage_tDBInput_3);
            	// If the record is reject, the main line record should put NULL
            	row5 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tDBInput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBInput_3 = null;


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	


 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	


 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		




		if(tHashFile_tHashOutput_2 == null){
			tHashFile_tHashOutput_2 = mf_tHashOutput_2.getAdvancedMemoryHashFile("tHashFile_Load_Profile_Risk_History_" + pid +"_tHashOutput_1");
			mf_tHashOutput_2.getResourceMap().put("tHashFile_Load_Profile_Risk_History_" + pid +"_tHashOutput_2", tHashFile_tHashOutput_2);
		}
		row2Struct oneRow_tHashOutput_2 = new row2Struct();
			oneRow_tHashOutput_2.Id = row5.Id;
			oneRow_tHashOutput_2.Category_State = row5.Category_State;
			oneRow_tHashOutput_2.Category_State_Value = row5.Category_State_Value;
			oneRow_tHashOutput_2.Category_Label = row5.Category_Label;
			oneRow_tHashOutput_2.ExecutionResult = row5.ExecutionResult;
			oneRow_tHashOutput_2.ExecutionStatus = row5.ExecutionStatus;
			oneRow_tHashOutput_2.UpdatedAt = row5.UpdatedAt;
			oneRow_tHashOutput_2.PartnerId = row5.PartnerId;
			oneRow_tHashOutput_2.SiteId = row5.SiteId;
			oneRow_tHashOutput_2.InserteDat = row5.InserteDat;
			oneRow_tHashOutput_2.ProfileId = row5.ProfileId;
			oneRow_tHashOutput_2.ENDPOINTID = row5.ENDPOINTID;
			oneRow_tHashOutput_2.ClientId = row5.ClientId;
			oneRow_tHashOutput_2.Score = row5.Score;
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;	
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	


 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	
// end of generic


resourceMap.put("finish_tDBInput_3", Boolean.TRUE);

    } // while
    reader_tDBInput_3.close();
    final java.util.Map<String, Object> resultMap_tDBInput_3 = reader_tDBInput_3.getReturnValues();
if(resultMap_tDBInput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBInput_3 : resultMap_tDBInput_3.entrySet()) {
		switch(entry_tDBInput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBInput_3.setComponentData("tDBInput_3", "ERROR_MESSAGE", entry_tDBInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBInput_3.setComponentData("tDBInput_3", "NB_LINE", entry_tDBInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBInput_3.setComponentData("tDBInput_3", "NB_SUCCESS", entry_tDBInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBInput_3.setComponentData("tDBInput_3", "NB_REJECT", entry_tDBInput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tDBInput_3 = new StringBuilder();
            for (int i_tDBInput_3 = 0; i_tDBInput_3 < entry_tDBInput_3.getKey().length(); i_tDBInput_3++) {
                char ch_tDBInput_3 = entry_tDBInput_3.getKey().charAt(i_tDBInput_3);
                if(Character.isUpperCase(ch_tDBInput_3) && i_tDBInput_3> 0) {
                	studio_key_tDBInput_3.append('_');
                }
                studio_key_tDBInput_3.append(ch_tDBInput_3);
            }
			container_tDBInput_3.setComponentData("tDBInput_3", studio_key_tDBInput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBInput_3.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tHashInput_2Process(globalMap);



/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	
// finally of generic


if(resourceMap.get("finish_tDBInput_3")==null){
    if(resourceMap.get("reader_tDBInput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tDBInput_3")).close();
		} catch (java.io.IOException e_tDBInput_3) {
			String errorMessage_tDBInput_3 = "failed to release the resource in tDBInput_3 :" + e_tDBInput_3.getMessage();
			System.err.println(errorMessage_tDBInput_3);
		}
	}
}
 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public Long Source_ID;

				public Long getSource_ID () {
					return this.Source_ID;
				}
				
			    public Long PartnerId;

				public Long getPartnerId () {
					return this.PartnerId;
				}
				
			    public Long SiteId;

				public Long getSiteId () {
					return this.SiteId;
				}
				
			    public Long ClientId;

				public Long getClientId () {
					return this.ClientId;
				}
				
			    public String EndPointId;

				public String getEndPointId () {
					return this.EndPointId;
				}
				
			    public String ProfileId;

				public String getProfileId () {
					return this.ProfileId;
				}
				
			    public String Profile_Name;

				public String getProfile_Name () {
					return this.Profile_Name;
				}
				
			    public Long Score;

				public Long getScore () {
					return this.Score;
				}
				
			    public java.util.Date Profile_Update_DateTime_LTZ;

				public java.util.Date getProfile_Update_DateTime_LTZ () {
					return this.Profile_Update_DateTime_LTZ;
				}
				
			    public String Category_Label;

				public String getCategory_Label () {
					return this.Category_Label;
				}
				
			    public String Category_Name;

				public String getCategory_Name () {
					return this.Category_Name;
				}
				
			    public String Category_Execution_state;

				public String getCategory_Execution_state () {
					return this.Category_Execution_state;
				}
				
			    public String Category_Execution_Result;

				public String getCategory_Execution_Result () {
					return this.Category_Execution_Result;
				}
				
			    public String Category_Execution_Status;

				public String getCategory_Execution_Status () {
					return this.Category_Execution_Status;
				}
				
			    public java.util.Date Category_Update_DateTime_LTZ;

				public java.util.Date getCategory_Update_DateTime_LTZ () {
					return this.Category_Update_DateTime_LTZ;
				}
				
			    public String Reason;

				public String getReason () {
					return this.Reason;
				}
				
			    public String ReasonDetails;

				public String getReasonDetails () {
					return this.ReasonDetails;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Source_ID = null;
           				} else {
           			    	this.Source_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PartnerId = null;
           				} else {
           			    	this.PartnerId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SiteId = null;
           				} else {
           			    	this.SiteId = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ClientId = null;
           				} else {
           			    	this.ClientId = dis.readLong();
           				}
					
					this.EndPointId = readString(dis);
					
					this.ProfileId = readString(dis);
					
					this.Profile_Name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Score = null;
           				} else {
           			    	this.Score = dis.readLong();
           				}
					
					this.Profile_Update_DateTime_LTZ = readDate(dis);
					
					this.Category_Label = readString(dis);
					
					this.Category_Name = readString(dis);
					
					this.Category_Execution_state = readString(dis);
					
					this.Category_Execution_Result = readString(dis);
					
					this.Category_Execution_Status = readString(dis);
					
					this.Category_Update_DateTime_LTZ = readDate(dis);
					
					this.Reason = readString(dis);
					
					this.ReasonDetails = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Source_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Source_ID);
		            	}
					
					// Long
				
						if(this.PartnerId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.PartnerId);
		            	}
					
					// Long
				
						if(this.SiteId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.SiteId);
		            	}
					
					// Long
				
						if(this.ClientId == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.ClientId);
		            	}
					
					// String
				
						writeString(this.EndPointId,dos);
					
					// String
				
						writeString(this.ProfileId,dos);
					
					// String
				
						writeString(this.Profile_Name,dos);
					
					// Long
				
						if(this.Score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Score);
		            	}
					
					// java.util.Date
				
						writeDate(this.Profile_Update_DateTime_LTZ,dos);
					
					// String
				
						writeString(this.Category_Label,dos);
					
					// String
				
						writeString(this.Category_Name,dos);
					
					// String
				
						writeString(this.Category_Execution_state,dos);
					
					// String
				
						writeString(this.Category_Execution_Result,dos);
					
					// String
				
						writeString(this.Category_Execution_Status,dos);
					
					// java.util.Date
				
						writeDate(this.Category_Update_DateTime_LTZ,dos);
					
					// String
				
						writeString(this.Reason,dos);
					
					// String
				
						writeString(this.ReasonDetails,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Source_ID="+String.valueOf(Source_ID));
		sb.append(",PartnerId="+String.valueOf(PartnerId));
		sb.append(",SiteId="+String.valueOf(SiteId));
		sb.append(",ClientId="+String.valueOf(ClientId));
		sb.append(",EndPointId="+EndPointId);
		sb.append(",ProfileId="+ProfileId);
		sb.append(",Profile_Name="+Profile_Name);
		sb.append(",Score="+String.valueOf(Score));
		sb.append(",Profile_Update_DateTime_LTZ="+String.valueOf(Profile_Update_DateTime_LTZ));
		sb.append(",Category_Label="+Category_Label);
		sb.append(",Category_Name="+Category_Name);
		sb.append(",Category_Execution_state="+Category_Execution_state);
		sb.append(",Category_Execution_Result="+Category_Execution_Result);
		sb.append(",Category_Execution_Status="+Category_Execution_Status);
		sb.append(",Category_Update_DateTime_LTZ="+String.valueOf(Category_Update_DateTime_LTZ));
		sb.append(",Reason="+Reason);
		sb.append(",ReasonDetails="+ReasonDetails);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Category_State;

				public String getCategory_State () {
					return this.Category_State;
				}
				
			    public String Category_State_Value;

				public String getCategory_State_Value () {
					return this.Category_State_Value;
				}
				
			    public String Category_Label;

				public String getCategory_Label () {
					return this.Category_Label;
				}
				
			    public String ExecutionResult;

				public String getExecutionResult () {
					return this.ExecutionResult;
				}
				
			    public String ExecutionStatus;

				public String getExecutionStatus () {
					return this.ExecutionStatus;
				}
				
			    public java.util.Date UpdatedAt;

				public java.util.Date getUpdatedAt () {
					return this.UpdatedAt;
				}
				
			    public String PartnerId;

				public String getPartnerId () {
					return this.PartnerId;
				}
				
			    public String SiteId;

				public String getSiteId () {
					return this.SiteId;
				}
				
			    public java.util.Date InserteDat;

				public java.util.Date getInserteDat () {
					return this.InserteDat;
				}
				
			    public String ProfileId;

				public String getProfileId () {
					return this.ProfileId;
				}
				
			    public String ENDPOINTID;

				public String getENDPOINTID () {
					return this.ENDPOINTID;
				}
				
			    public String ClientId;

				public String getClientId () {
					return this.ClientId;
				}
				
			    public Long Score;

				public Long getScore () {
					return this.Score;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Category_State = readString(dis);
					
					this.Category_State_Value = readString(dis);
					
					this.Category_Label = readString(dis);
					
					this.ExecutionResult = readString(dis);
					
					this.ExecutionStatus = readString(dis);
					
					this.UpdatedAt = readDate(dis);
					
					this.PartnerId = readString(dis);
					
					this.SiteId = readString(dis);
					
					this.InserteDat = readDate(dis);
					
					this.ProfileId = readString(dis);
					
					this.ENDPOINTID = readString(dis);
					
					this.ClientId = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Score = null;
           				} else {
           			    	this.Score = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Category_State,dos);
					
					// String
				
						writeString(this.Category_State_Value,dos);
					
					// String
				
						writeString(this.Category_Label,dos);
					
					// String
				
						writeString(this.ExecutionResult,dos);
					
					// String
				
						writeString(this.ExecutionStatus,dos);
					
					// java.util.Date
				
						writeDate(this.UpdatedAt,dos);
					
					// String
				
						writeString(this.PartnerId,dos);
					
					// String
				
						writeString(this.SiteId,dos);
					
					// java.util.Date
				
						writeDate(this.InserteDat,dos);
					
					// String
				
						writeString(this.ProfileId,dos);
					
					// String
				
						writeString(this.ENDPOINTID,dos);
					
					// String
				
						writeString(this.ClientId,dos);
					
					// Long
				
						if(this.Score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Score);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Category_State="+Category_State);
		sb.append(",Category_State_Value="+Category_State_Value);
		sb.append(",Category_Label="+Category_Label);
		sb.append(",ExecutionResult="+ExecutionResult);
		sb.append(",ExecutionStatus="+ExecutionStatus);
		sb.append(",UpdatedAt="+String.valueOf(UpdatedAt));
		sb.append(",PartnerId="+PartnerId);
		sb.append(",SiteId="+SiteId);
		sb.append(",InserteDat="+String.valueOf(InserteDat));
		sb.append(",ProfileId="+ProfileId);
		sb.append(",ENDPOINTID="+ENDPOINTID);
		sb.append(",ClientId="+ClientId);
		sb.append(",Score="+String.valueOf(Score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public Long Id;

				public Long getId () {
					return this.Id;
				}
				
			    public String Category_State;

				public String getCategory_State () {
					return this.Category_State;
				}
				
			    public String Category_State_Value;

				public String getCategory_State_Value () {
					return this.Category_State_Value;
				}
				
			    public String Category_Label;

				public String getCategory_Label () {
					return this.Category_Label;
				}
				
			    public String ExecutionResult;

				public String getExecutionResult () {
					return this.ExecutionResult;
				}
				
			    public String ExecutionStatus;

				public String getExecutionStatus () {
					return this.ExecutionStatus;
				}
				
			    public java.util.Date UpdatedAt;

				public java.util.Date getUpdatedAt () {
					return this.UpdatedAt;
				}
				
			    public String PartnerId;

				public String getPartnerId () {
					return this.PartnerId;
				}
				
			    public String SiteId;

				public String getSiteId () {
					return this.SiteId;
				}
				
			    public java.util.Date InserteDat;

				public java.util.Date getInserteDat () {
					return this.InserteDat;
				}
				
			    public String ProfileId;

				public String getProfileId () {
					return this.ProfileId;
				}
				
			    public String ENDPOINTID;

				public String getENDPOINTID () {
					return this.ENDPOINTID;
				}
				
			    public String ClientId;

				public String getClientId () {
					return this.ClientId;
				}
				
			    public Long Score;

				public Long getScore () {
					return this.Score;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Id = null;
           				} else {
           			    	this.Id = dis.readLong();
           				}
					
					this.Category_State = readString(dis);
					
					this.Category_State_Value = readString(dis);
					
					this.Category_Label = readString(dis);
					
					this.ExecutionResult = readString(dis);
					
					this.ExecutionStatus = readString(dis);
					
					this.UpdatedAt = readDate(dis);
					
					this.PartnerId = readString(dis);
					
					this.SiteId = readString(dis);
					
					this.InserteDat = readDate(dis);
					
					this.ProfileId = readString(dis);
					
					this.ENDPOINTID = readString(dis);
					
					this.ClientId = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Score = null;
           				} else {
           			    	this.Score = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.Id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Id);
		            	}
					
					// String
				
						writeString(this.Category_State,dos);
					
					// String
				
						writeString(this.Category_State_Value,dos);
					
					// String
				
						writeString(this.Category_Label,dos);
					
					// String
				
						writeString(this.ExecutionResult,dos);
					
					// String
				
						writeString(this.ExecutionStatus,dos);
					
					// java.util.Date
				
						writeDate(this.UpdatedAt,dos);
					
					// String
				
						writeString(this.PartnerId,dos);
					
					// String
				
						writeString(this.SiteId,dos);
					
					// java.util.Date
				
						writeDate(this.InserteDat,dos);
					
					// String
				
						writeString(this.ProfileId,dos);
					
					// String
				
						writeString(this.ENDPOINTID,dos);
					
					// String
				
						writeString(this.ClientId,dos);
					
					// Long
				
						if(this.Score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.Score);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+String.valueOf(Id));
		sb.append(",Category_State="+Category_State);
		sb.append(",Category_State_Value="+Category_State_Value);
		sb.append(",Category_Label="+Category_Label);
		sb.append(",ExecutionResult="+ExecutionResult);
		sb.append(",ExecutionStatus="+ExecutionStatus);
		sb.append(",UpdatedAt="+String.valueOf(UpdatedAt));
		sb.append(",PartnerId="+PartnerId);
		sb.append(",SiteId="+SiteId);
		sb.append(",InserteDat="+String.valueOf(InserteDat));
		sb.append(",ProfileId="+ProfileId);
		sb.append(",ENDPOINTID="+ENDPOINTID);
		sb.append(",ClientId="+ClientId);
		sb.append(",Score="+String.valueOf(Score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);

		row6Struct row6 = new row6Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		
    	class BytesLimit65535_tDBOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_3().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBOutput_3 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tDBOutput_3 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tDBOutput_3.createRuntimeProperties();
 		                    props_tDBOutput_3.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);
 		                    
 		                    props_tDBOutput_3.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("debug",
 		                    false);
 		                    
 		                    props_tDBOutput_3.setValue("useBatch",
 		                    true);
 		                    
 		                    props_tDBOutput_3.setValue("batchSize",
 		                    10000);
 		                    
 		                    props_tDBOutput_3.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_3.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBOutput_3.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    java.util.List<Object> tDBOutput_3_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_3_connection_driverTable_drivers.add("mvn:org.talend.libraries/newLine/6.0.0-SNAPSHOT/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_3.connection.driverTable).setValue("drivers",tDBOutput_3_connection_driverTable_drivers);
 		                    
 		                    props_tDBOutput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_3.tableSelection.setValue("tablename",
 		                    "SRC.Security_Profile_Risk_History");
 		                    
 		                    props_tDBOutput_3.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"out1\",\"fields\":[{\"name\":\"Source_ID\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Source_ID\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Source_ID\",\"di.column.relatedEntity\":\"\"},{\"name\":\"PartnerId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PartnerId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"PartnerId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PartnerId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"SiteId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"SiteId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"SiteId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SiteId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ClientId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ClientId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ClientId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ClientId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"EndPointId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ENDPOINTID\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"EndPointId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"EndPointId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ProfileId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ProfileId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ProfileId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ProfileId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Profile_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Score\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Score\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Score\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Score\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Profile_Update_DateTime_LTZ\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"InserteDat\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_Update_DateTime_LTZ\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_Update_DateTime_LTZ\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Label\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_Label\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Label\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Label\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_state\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_State\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_state\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_state\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_Result\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExecutionResult\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_Result\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_Result\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_Status\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExecutionStatus\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_Status\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_Status\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Update_DateTime_LTZ\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"UpdatedAt\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Update_DateTime_LTZ\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Update_DateTime_LTZ\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Reason\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Reason\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Reason\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ReasonDetails\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_State_Value\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ReasonDetails\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ReasonDetails\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"out1\",\"di.table.label\":\"out1\"}"));
 		                    
 		                    props_tDBOutput_3.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"out1\",\"fields\":[{\"name\":\"Source_ID\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Source_ID\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Source_ID\",\"di.column.relatedEntity\":\"\"},{\"name\":\"PartnerId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PartnerId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"PartnerId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PartnerId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"SiteId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"SiteId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"SiteId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SiteId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ClientId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ClientId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ClientId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ClientId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"EndPointId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ENDPOINTID\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"EndPointId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"EndPointId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ProfileId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ProfileId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ProfileId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ProfileId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Profile_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Score\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Score\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Score\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Score\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Profile_Update_DateTime_LTZ\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"InserteDat\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_Update_DateTime_LTZ\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_Update_DateTime_LTZ\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Label\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_Label\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Label\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Label\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_state\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_State\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_state\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_state\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_Result\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExecutionResult\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_Result\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_Result\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_Status\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExecutionStatus\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_Status\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_Status\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Update_DateTime_LTZ\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"UpdatedAt\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Update_DateTime_LTZ\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Update_DateTime_LTZ\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Reason\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Reason\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Reason\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ReasonDetails\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_State_Value\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ReasonDetails\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ReasonDetails\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"out1\",\"di.table.label\":\"out1\"}"));
 		                    
 		                    props_tDBOutput_3.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"Source_ID\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Source_ID\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Source_ID\",\"di.column.relatedEntity\":\"\"},{\"name\":\"PartnerId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"PartnerId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"PartnerId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"PartnerId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"SiteId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"SiteId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"SiteId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SiteId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ClientId\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ClientId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ClientId\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ClientId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"EndPointId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ENDPOINTID\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"EndPointId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"EndPointId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ProfileId\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ProfileId\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ProfileId\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ProfileId\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Profile_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Score\",\"type\":[\"long\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Score\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Score\",\"di.column.talendType\":\"id_Long\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Score\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Profile_Update_DateTime_LTZ\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"InserteDat\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_Update_DateTime_LTZ\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_Update_DateTime_LTZ\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Label\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_Label\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Label\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Label\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_state\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_State\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_state\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_state\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_Result\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExecutionResult\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_Result\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_Result\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Execution_Status\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExecutionStatus\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Execution_Status\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Execution_Status\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Category_Update_DateTime_LTZ\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"UpdatedAt\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Category_Update_DateTime_LTZ\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSS\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Category_Update_DateTime_LTZ\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Reason\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Reason\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Reason\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ReasonDetails\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Category_State_Value\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ReasonDetails\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ReasonDetails\",\"di.column.relatedEntity\":\"\"},{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"out1\",\"di.table.label\":\"out1\"}"));
 		                    
 		                    props_tDBOutput_3.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tDBOutput_3.additionalColumns.setValue("referenceColumns",
 		                    "Source_ID");
 		                    
 		                    java.util.List<Object> tDBOutput_3_fieldOptions_schemaColumns = new java.util.ArrayList<Object>();
 		                    
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Source_ID");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("PartnerId");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("SiteId");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("ClientId");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("EndPointId");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("ProfileId");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Profile_Name");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Score");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Profile_Update_DateTime_LTZ");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Category_Label");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Category_Name");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Category_Execution_state");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Category_Execution_Result");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Category_Execution_Status");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Category_Update_DateTime_LTZ");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("Reason");
 		                            
 		                            tDBOutput_3_fieldOptions_schemaColumns.add("ReasonDetails");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_3.fieldOptions).setValue("schemaColumns",tDBOutput_3_fieldOptions_schemaColumns);
 		                    
 		                    java.util.List<Object> tDBOutput_3_fieldOptions_updateKey = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_updateKey.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_3.fieldOptions).setValue("updateKey",tDBOutput_3_fieldOptions_updateKey);
 		                    
 		                    java.util.List<Object> tDBOutput_3_fieldOptions_deletionKey = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_3_fieldOptions_deletionKey.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_3.fieldOptions).setValue("deletionKey",tDBOutput_3_fieldOptions_deletionKey);
 		                    
 		                    java.util.List<Object> tDBOutput_3_fieldOptions_updatable = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_updatable.add(true);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_3.fieldOptions).setValue("updatable",tDBOutput_3_fieldOptions_updatable);
 		                    
 		                    java.util.List<Object> tDBOutput_3_fieldOptions_insertable = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_3_fieldOptions_insertable.add(true);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_3.fieldOptions).setValue("insertable",tDBOutput_3_fieldOptions_insertable);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_3.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_3 = props_tDBOutput_3.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_3.referencedComponent.setReference(referencedComponentProperties_tDBOutput_3);
        }
    }
globalMap.put("tDBOutput_3_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_3);

java.net.URL mappings_url_tDBOutput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_3_MAPPINGS_URL", mappings_url_tDBOutput_3);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_3 = null;
topology_tDBOutput_3 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_3 = def_tDBOutput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_3, topology_tDBOutput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_3 = def_tDBOutput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_3 = componentRuntime_tDBOutput_3.initialize(container_tDBOutput_3, props_tDBOutput_3);

if (initVr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_3.getMessage());
}

if(componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_3;
	compDriverInitialization_tDBOutput_3.runAtDriver(container_tDBOutput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_3 = null;
if(componentRuntime_tDBOutput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_3;
	org.talend.daikon.properties.ValidationResult vr_tDBOutput_3 = sourceOrSink_tDBOutput_3.validate(container_tDBOutput_3);
	if (vr_tDBOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBOutput_3.getMessage());
	}
}

    org.talend.components.api.component.runtime.Sink sink_tDBOutput_3 =
            (org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_3;
    org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_3 = sink_tDBOutput_3.createWriteOperation();
    writeOperation_tDBOutput_3.initialize(container_tDBOutput_3);
    org.talend.components.api.component.runtime.Writer writer_tDBOutput_3 = writeOperation_tDBOutput_3.createWriter(container_tDBOutput_3);
    writer_tDBOutput_3.open("tDBOutput_3");

    resourceMap.put("writer_tDBOutput_3", writer_tDBOutput_3);

    org.talend.components.api.component.Connector c_tDBOutput_3 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_3.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_3 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_3 = props_tDBOutput_3.getSchema(c_tDBOutput_3, false);
    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_3
            = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_3);
                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_3 = null;


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		
    	class BytesLimit65535_tHashInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHashInput_2().limitLog4jByte();


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_Load_Profile_Risk_History_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row2Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row6.Id = next_tHashInput_2.Id;
	row6.Category_State = next_tHashInput_2.Category_State;
	row6.Category_State_Value = next_tHashInput_2.Category_State_Value;
	row6.Category_Label = next_tHashInput_2.Category_Label;
	row6.ExecutionResult = next_tHashInput_2.ExecutionResult;
	row6.ExecutionStatus = next_tHashInput_2.ExecutionStatus;
	row6.UpdatedAt = next_tHashInput_2.UpdatedAt;
	row6.PartnerId = next_tHashInput_2.PartnerId;
	row6.SiteId = next_tHashInput_2.SiteId;
	row6.InserteDat = next_tHashInput_2.InserteDat;
	row6.ProfileId = next_tHashInput_2.ProfileId;
	row6.ENDPOINTID = next_tHashInput_2.ENDPOINTID;
	row6.ClientId = next_tHashInput_2.ClientId;
	row6.Score = next_tHashInput_2.Score;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row7HashKey.Profile_ID = row6.ProfileId ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.Profile_ID = '" + row7HashKey.Profile_ID + "'");
								} // G 071
							

							row7Struct row7 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row8HashKey.ST_Translation_Name = row6.Category_Label ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.ST_Translation_Name = '" + row8HashKey.ST_Translation_Name + "'");
								} // G 071
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row9HashKey.ST_Translation_Name = row6.Category_State ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.ST_Translation_Name = '" + row9HashKey.ST_Translation_Name + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.Source_ID = row6.Id ;
out1_tmp.PartnerId = Long.parseLong(row6.PartnerId) ;
out1_tmp.SiteId = Long.parseLong(row6.SiteId) ;
out1_tmp.ClientId = Long.parseLong(row6.ClientId) ;
out1_tmp.EndPointId = row6.ENDPOINTID ;
out1_tmp.ProfileId = row6.ProfileId ;
out1_tmp.Profile_Name = row7.Profile_Name ;
out1_tmp.Score = row6.Score ;
out1_tmp.Profile_Update_DateTime_LTZ = row6.InserteDat ;
out1_tmp.Category_Label = row6.Category_Label ;
out1_tmp.Category_Name = row8.ST_Translation ;
out1_tmp.Category_Execution_state = row6.Category_State ;
out1_tmp.Category_Execution_Result = row6.ExecutionResult ;
out1_tmp.Category_Execution_Status = row6.ExecutionStatus ;
out1_tmp.Category_Update_DateTime_LTZ = row6.UpdatedAt ;
out1_tmp.Reason = row9.ST_Translation ;
out1_tmp.ReasonDetails = row6.Category_State_Value ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		

            incomingEnforcer_tDBOutput_3.createNewRecord();
                    incomingEnforcer_tDBOutput_3.put("Source_ID", out1.Source_ID);
                    incomingEnforcer_tDBOutput_3.put("PartnerId", out1.PartnerId);
                    incomingEnforcer_tDBOutput_3.put("SiteId", out1.SiteId);
                    incomingEnforcer_tDBOutput_3.put("ClientId", out1.ClientId);
                    incomingEnforcer_tDBOutput_3.put("EndPointId", out1.EndPointId);
                    incomingEnforcer_tDBOutput_3.put("ProfileId", out1.ProfileId);
                    incomingEnforcer_tDBOutput_3.put("Profile_Name", out1.Profile_Name);
                    incomingEnforcer_tDBOutput_3.put("Score", out1.Score);
                    incomingEnforcer_tDBOutput_3.put("Profile_Update_DateTime_LTZ", out1.Profile_Update_DateTime_LTZ);
                    incomingEnforcer_tDBOutput_3.put("Category_Label", out1.Category_Label);
                    incomingEnforcer_tDBOutput_3.put("Category_Name", out1.Category_Name);
                    incomingEnforcer_tDBOutput_3.put("Category_Execution_state", out1.Category_Execution_state);
                    incomingEnforcer_tDBOutput_3.put("Category_Execution_Result", out1.Category_Execution_Result);
                    incomingEnforcer_tDBOutput_3.put("Category_Execution_Status", out1.Category_Execution_Status);
                    incomingEnforcer_tDBOutput_3.put("Category_Update_DateTime_LTZ", out1.Category_Update_DateTime_LTZ);
                    incomingEnforcer_tDBOutput_3.put("Reason", out1.Reason);
                    incomingEnforcer_tDBOutput_3.put("ReasonDetails", out1.ReasonDetails);
            org.apache.avro.generic.IndexedRecord data_tDBOutput_3 = incomingEnforcer_tDBOutput_3.getCurrentRecord();
            

            writer_tDBOutput_3.write(data_tDBOutput_3);
            
            nb_line_tDBOutput_3++;

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	


 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	


 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Load_Profile_Risk_History_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
// end of generic


resourceMap.put("finish_tDBOutput_3", Boolean.TRUE);

    org.talend.components.api.component.runtime.Result resultObject_tDBOutput_3 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_3.close();
    final java.util.Map<String, Object> resultMap_tDBOutput_3 = writer_tDBOutput_3.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_3), container_tDBOutput_3);
if(resultMap_tDBOutput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_3 : resultMap_tDBOutput_3.entrySet()) {
		switch(entry_tDBOutput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "ERROR_MESSAGE", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_LINE", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_SUCCESS", entry_tDBOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_3.setComponentData("tDBOutput_3", "NB_REJECT", entry_tDBOutput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_3 = new StringBuilder();
            for (int i_tDBOutput_3 = 0; i_tDBOutput_3 < entry_tDBOutput_3.getKey().length(); i_tDBOutput_3++) {
                char ch_tDBOutput_3 = entry_tDBOutput_3.getKey().charAt(i_tDBOutput_3);
                if(Character.isUpperCase(ch_tDBOutput_3) && i_tDBOutput_3> 0) {
                	studio_key_tDBOutput_3.append('_');
                }
                studio_key_tDBOutput_3.append(ch_tDBOutput_3);
            }
			container_tDBOutput_3.setComponentData("tDBOutput_3", studio_key_tDBOutput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_3.getValue());
			break;
		}
	}
}

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBRow_5Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
// finally of generic


if(resourceMap.get("finish_tDBOutput_3")==null){
    if(resourceMap.get("writer_tDBOutput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_3")).close();
		} catch (java.io.IOException e_tDBOutput_3) {
			String errorMessage_tDBOutput_3 = "failed to release the resource in tDBOutput_3 :" + e_tDBOutput_3.getMessage();
			System.err.println(errorMessage_tDBOutput_3);
		}
	}
}
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_5", false);
		start_Hash.put("tDBRow_5", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_5";

	
		int tos_count_tDBRow_5 = 0;
		
    	class BytesLimit65535_tDBRow_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_5().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_5 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_5 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_5.createRuntimeProperties();
 		                    props_tDBRow_5.setValue("sql",
 		                    "UPDATE SRC.Security_Profile_Risk_History Set Profile_Update_DateTime_NTZ=CONVERT_TIMEZONE('US/Pacific','UTC',(TO_Timestamp_NTZ(Profile_Update_DateTime_LTZ))),     Category_Update_DateTime_NTZ=CONVERT_TIMEZONE('US/Pacific','UTC',(TO_Timestamp_NTZ(Category_Update_DateTime_LTZ))) WHERE CAST(DateAsOn AS DATE) =CAST(Convert_Timezone('US/Pacific','UTC',To_Timestamp_NTZ(Current_Timestamp())) AS DATE)");
 		                    
 		                    props_tDBRow_5.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_5.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_5.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_5.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_5.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_5.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_5.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_5.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_5.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_5.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_5.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_5.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_5.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_5 = props_tDBRow_5.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_5.referencedComponent.setReference(referencedComponentProperties_tDBRow_5);
        }
    }
globalMap.put("tDBRow_5_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_5);

java.net.URL mappings_url_tDBRow_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_5_MAPPINGS_URL", mappings_url_tDBRow_5);

org.talend.components.api.container.RuntimeContainer container_tDBRow_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_5 = null;
topology_tDBRow_5 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_5 = def_tDBRow_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_5, topology_tDBRow_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_5 = def_tDBRow_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_5 = componentRuntime_tDBRow_5.initialize(container_tDBRow_5, props_tDBRow_5);

if (initVr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_5.getMessage());
}

if(componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_5;
	compDriverInitialization_tDBRow_5.runAtDriver(container_tDBRow_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_5 = null;
if(componentRuntime_tDBRow_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_5;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_5 = sourceOrSink_tDBRow_5.validate(container_tDBRow_5);
	if (vr_tDBRow_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_5.getMessage());
	}
}

 



/**
 * [tDBRow_5 begin ] stop
 */
	
	/**
	 * [tDBRow_5 main ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	


 


	tos_count_tDBRow_5++;

/**
 * [tDBRow_5 main ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	


 



/**
 * [tDBRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	


 



/**
 * [tDBRow_5 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_5 end ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	
// end of generic


resourceMap.put("finish_tDBRow_5", Boolean.TRUE);

 

ok_Hash.put("tDBRow_5", true);
end_Hash.put("tDBRow_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);



/**
 * [tDBRow_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_5 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_5";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_5")==null){
}
 



/**
 * [tDBRow_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStop_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStop_1", false);
		start_Hash.put("tChronometerStop_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStop_1";

	
		int tos_count_tChronometerStop_1 = 0;
		
    	class BytesLimit65535_tChronometerStop_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tChronometerStop_1().limitLog4jByte();
	
	long timetChronometerStop_1;
	
	  	timetChronometerStop_1 = System.currentTimeMillis() - ((Long)globalMap.get("tChronometerStart_1")).longValue();
		
	   		System.out.print("[ tChronometerStop_1 ]  ");
		
	    	System.out.print("   " + timetChronometerStop_1/1000 + "seconds   ");
		    
	  		
	  	System.out.println("" + "  " + timetChronometerStop_1 + " milliseconds");
	  	 
	
	Long currentTimetChronometerStop_1 = System.currentTimeMillis();
	globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);
	
	globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
	globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);
 



/**
 * [tChronometerStop_1 begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 


	tos_count_tChronometerStop_1++;

/**
 * [tChronometerStop_1 main ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStop_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 

ok_Hash.put("tChronometerStop_1", true);
end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tDBRow_4Process(globalMap);



/**
 * [tChronometerStop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStop_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_4", false);
		start_Hash.put("tDBRow_4", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_4";

	
		int tos_count_tDBRow_4 = 0;
		
    	class BytesLimit65535_tDBRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_4().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_4 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_4 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_4.createRuntimeProperties();
 		                    props_tDBRow_4.setValue("sql",
 		                    "Update STG.Job_Control  SET  JobEndDate=CONVERT_TIMEZONE('US/Pacific','UTC',cast(CURRENT_TIMESTAMP() as TIMESTAMP_NTZ)), Status=TRUE, DURATION="+((Long)globalMap.get("tChronometerStop_1_DURATION"))/1000+ "WHERE JOBID="+globalMap.get("JobID"));
 		                    
 		                    props_tDBRow_4.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_4.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_4.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_4.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_4.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_4.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_4.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_4.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_4.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_4.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_4.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_4.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_4.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_4 = props_tDBRow_4.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_4 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_4 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_4 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_4.referencedComponent.setReference(referencedComponentProperties_tDBRow_4);
        }
    }
globalMap.put("tDBRow_4_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_4);

java.net.URL mappings_url_tDBRow_4= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_4_MAPPINGS_URL", mappings_url_tDBRow_4);

org.talend.components.api.container.RuntimeContainer container_tDBRow_4 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_4";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_4 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_4 = null;
topology_tDBRow_4 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_4 = def_tDBRow_4.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_4, topology_tDBRow_4);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_4 = def_tDBRow_4.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_4 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_4.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_4 = componentRuntime_tDBRow_4.initialize(container_tDBRow_4, props_tDBRow_4);

if (initVr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_4.getMessage());
}

if(componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_4;
	compDriverInitialization_tDBRow_4.runAtDriver(container_tDBRow_4);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_4 = null;
if(componentRuntime_tDBRow_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_4 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_4;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_4 = sourceOrSink_tDBRow_4.validate(container_tDBRow_4);
	if (vr_tDBRow_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_4.getMessage());
	}
}

 



/**
 * [tDBRow_4 begin ] stop
 */
	
	/**
	 * [tDBRow_4 main ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	


 


	tos_count_tDBRow_4++;

/**
 * [tDBRow_4 main ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	


 



/**
 * [tDBRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	


 



/**
 * [tDBRow_4 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_4 end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	
// end of generic


resourceMap.put("finish_tDBRow_4", Boolean.TRUE);

 

ok_Hash.put("tDBRow_4", true);
end_Hash.put("tDBRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tDBRow_6Process(globalMap);



/**
 * [tDBRow_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_4 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_4")==null){
}
 



/**
 * [tDBRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_6", false);
		start_Hash.put("tDBRow_6", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_6";

	
		int tos_count_tDBRow_6 = 0;
		
    	class BytesLimit65535_tDBRow_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_6().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_6 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_6 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_6.createRuntimeProperties();
 		                    props_tDBRow_6.setValue("sql",
 		                    "INSERT INTO STG.Job_Control_History SELECT JOBID,JOBSTARTDATE,JOBENDDATE,STATUS,DURATION,  CONVERT_TIMEZONE('Pacific/Pitcairn','UTC',cast(CURRENT_TIMESTAMP() as TIMESTAMP_NTZ))  FROM STG.Job_Control where JOBID ="+globalMap.get("JobID"));
 		                    
 		                    props_tDBRow_6.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_6.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_6.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_6.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_6.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_6.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_6.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_6.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_6.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_6.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_6.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_6.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_6.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_6 = props_tDBRow_6.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_6 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_6 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_6 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_6.referencedComponent.setReference(referencedComponentProperties_tDBRow_6);
        }
    }
globalMap.put("tDBRow_6_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_6);

java.net.URL mappings_url_tDBRow_6= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_6_MAPPINGS_URL", mappings_url_tDBRow_6);

org.talend.components.api.container.RuntimeContainer container_tDBRow_6 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_6";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_6 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_6 = null;
topology_tDBRow_6 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_6 = def_tDBRow_6.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_6, topology_tDBRow_6);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_6 = def_tDBRow_6.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_6 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_6.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_6 = componentRuntime_tDBRow_6.initialize(container_tDBRow_6, props_tDBRow_6);

if (initVr_tDBRow_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_6.getMessage());
}

if(componentRuntime_tDBRow_6 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_6 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_6;
	compDriverInitialization_tDBRow_6.runAtDriver(container_tDBRow_6);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_6 = null;
if(componentRuntime_tDBRow_6 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_6 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_6;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_6 = sourceOrSink_tDBRow_6.validate(container_tDBRow_6);
	if (vr_tDBRow_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_6.getMessage());
	}
}

 



/**
 * [tDBRow_6 begin ] stop
 */
	
	/**
	 * [tDBRow_6 main ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	


 


	tos_count_tDBRow_6++;

/**
 * [tDBRow_6 main ] stop
 */
	
	/**
	 * [tDBRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	


 



/**
 * [tDBRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	


 



/**
 * [tDBRow_6 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_6 end ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	
// end of generic


resourceMap.put("finish_tDBRow_6", Boolean.TRUE);

 

ok_Hash.put("tDBRow_6", true);
end_Hash.put("tDBRow_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tDBRow_8Process(globalMap);



/**
 * [tDBRow_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_6 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_6";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_6")==null){
}
 



/**
 * [tDBRow_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_6_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_8", false);
		start_Hash.put("tDBRow_8", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_8";

	
		int tos_count_tDBRow_8 = 0;
		
    	class BytesLimit65535_tDBRow_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_8().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_8 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_8 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_8.createRuntimeProperties();
 		                    props_tDBRow_8.setValue("sql",
 		                    "Update STG.DATA_COLLECTION	 SET  STAGING_SRC_LOADED=TRUE Where  LoadType = 'Load_Profile_Risk_Data' AND STAGING_SRC_LOADED =FALSE");
 		                    
 		                    props_tDBRow_8.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_8.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_8.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_8.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_8.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_8.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_8.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_8.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_8.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_8.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_8.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_8.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_8.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_8 = props_tDBRow_8.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_8 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_8 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_8 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_8.referencedComponent.setReference(referencedComponentProperties_tDBRow_8);
        }
    }
globalMap.put("tDBRow_8_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_8);

java.net.URL mappings_url_tDBRow_8= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_8_MAPPINGS_URL", mappings_url_tDBRow_8);

org.talend.components.api.container.RuntimeContainer container_tDBRow_8 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_8";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_8 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_8 = null;
topology_tDBRow_8 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_8 = def_tDBRow_8.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_8, topology_tDBRow_8);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_8 = def_tDBRow_8.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_8 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_8.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_8 = componentRuntime_tDBRow_8.initialize(container_tDBRow_8, props_tDBRow_8);

if (initVr_tDBRow_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_8.getMessage());
}

if(componentRuntime_tDBRow_8 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_8 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_8;
	compDriverInitialization_tDBRow_8.runAtDriver(container_tDBRow_8);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_8 = null;
if(componentRuntime_tDBRow_8 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_8 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_8;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_8 = sourceOrSink_tDBRow_8.validate(container_tDBRow_8);
	if (vr_tDBRow_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_8.getMessage());
	}
}

 



/**
 * [tDBRow_8 begin ] stop
 */
	
	/**
	 * [tDBRow_8 main ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	


 


	tos_count_tDBRow_8++;

/**
 * [tDBRow_8 main ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	


 



/**
 * [tDBRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	


 



/**
 * [tDBRow_8 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_8 end ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	
// end of generic


resourceMap.put("finish_tDBRow_8", Boolean.TRUE);

 

ok_Hash.put("tDBRow_8", true);
end_Hash.put("tDBRow_8", System.currentTimeMillis());




/**
 * [tDBRow_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_8 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_8";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_8")==null){
}
 



/**
 * [tDBRow_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		
    	class BytesLimit65535_tDBRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_1().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBRow_1 =
        new org.talend.components.jdbc.tjdbcrow.TJDBCRowDefinition();

org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties props_tDBRow_1 =
        (org.talend.components.jdbc.tjdbcrow.TJDBCRowProperties) def_tDBRow_1.createRuntimeProperties();
 		                    props_tDBRow_1.setValue("sql",
 		                    "Truncate Table SRC.Staging_Profile_Risk_History");
 		                    
 		                    props_tDBRow_1.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBRow_1.setValue("propagateQueryResultSet",
 		                    false);
 		                    
 		                    props_tDBRow_1.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tDBRow_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBRow_1.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBRow_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBRow_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBRow_1.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_1.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmptyRecord\",\"fields\":[]}"));
 		                    
 		                    props_tDBRow_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}]}"));
 		                    
 		                    props_tDBRow_1.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    props_tDBRow_1.preparedStatementTable.setValue("types",
 		                    "BigDecimal");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBRow_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBRow_1 = props_tDBRow_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBRow_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBRow_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBRow_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBRow_1.referencedComponent.setReference(referencedComponentProperties_tDBRow_1);
        }
    }
globalMap.put("tDBRow_1_COMPONENT_RUNTIME_PROPERTIES", props_tDBRow_1);

java.net.URL mappings_url_tDBRow_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBRow_1_MAPPINGS_URL", mappings_url_tDBRow_1);

org.talend.components.api.container.RuntimeContainer container_tDBRow_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBRow_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBRow_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBRow_1 = null;
topology_tDBRow_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBRow_1 = def_tDBRow_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBRow_1, topology_tDBRow_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBRow_1 = def_tDBRow_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBRow_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBRow_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBRow_1 = componentRuntime_tDBRow_1.initialize(container_tDBRow_1, props_tDBRow_1);

if (initVr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBRow_1.getMessage());
}

if(componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBRow_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBRow_1;
	compDriverInitialization_tDBRow_1.runAtDriver(container_tDBRow_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBRow_1 = null;
if(componentRuntime_tDBRow_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBRow_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBRow_1;
	org.talend.daikon.properties.ValidationResult vr_tDBRow_1 = sourceOrSink_tDBRow_1.validate(container_tDBRow_1);
	if (vr_tDBRow_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBRow_1.getMessage());
	}
}

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	


 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	


 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	


 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	
// end of generic


resourceMap.put("finish_tDBRow_1", Boolean.TRUE);

 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tCassandraInput_1Process(globalMap);



/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	
// finally of generic


if(resourceMap.get("finish_tDBRow_1")==null){
}
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStart_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStart_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStart_1", false);
		start_Hash.put("tChronometerStart_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStart_1";

	
		int tos_count_tChronometerStart_1 = 0;
		
    	class BytesLimit65535_tChronometerStart_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tChronometerStart_1().limitLog4jByte();

	
	
	Long currentTimetChronometerStart_1 = System.currentTimeMillis();
	
	globalMap.put("tChronometerStart_1",currentTimetChronometerStart_1);
	globalMap.put("tChronometerStart_1_STARTTIME", currentTimetChronometerStart_1);
 



/**
 * [tChronometerStart_1 begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 


	tos_count_tChronometerStart_1++;

/**
 * [tChronometerStart_1 main ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStart_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 

ok_Hash.put("tChronometerStart_1", true);
end_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBRow_1Process(globalMap);



/**
 * [tChronometerStart_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStart_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Profile_ID;

				public String getProfile_ID () {
					return this.Profile_ID;
				}
				
			    public String Profile_Name;

				public String getProfile_Name () {
					return this.Profile_Name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Profile_ID == null) ? 0 : this.Profile_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.Profile_ID == null) {
							if (other.Profile_ID != null)
								return false;
						
						} else if (!this.Profile_ID.equals(other.Profile_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.Profile_ID = this.Profile_ID;
	            other.Profile_Name = this.Profile_Name;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.Profile_ID = this.Profile_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.Profile_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Profile_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Profile_Name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Profile_Name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Profile_ID="+Profile_ID);
		sb.append(",Profile_Name="+Profile_Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Profile_ID, other.Profile_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row7 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row7().limitLog4jByte();

			   		// connection name:row7
			   		// source node:tDBInput_4 - inputs:(after_tHashInput_2) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row7,row8,row9) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
    	class BytesLimit65535_tDBInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_4().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBInput_4 =
        new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tDBInput_4 =
        (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tDBInput_4.createRuntimeProperties();
 		                    props_tDBInput_4.setValue("sql",
 		                    "Select Profile_ID,Profile_Name FROM PRD.DIM_SEC_Profile");
 		                    
 		                    props_tDBInput_4.setValue("useCursor",
 		                    false);
 		                    
 		                    props_tDBInput_4.setValue("trimStringOrCharColumns",
 		                    false);
 		                    
 		                    props_tDBInput_4.setValue("enableDBMapping",
 		                    false);
 		                    
 		                    props_tDBInput_4.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBInput_4.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_1");
 		                    
 		                    props_tDBInput_4.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBInput_4.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBInput_4.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MAIN\",\"fields\":[{\"name\":\"Profile_ID\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_ID\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_ID\",\"di.column.relatedEntity\":\"\"},{\"name\":\"Profile_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Profile_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Profile_Name\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}"));
 		                    
 		                    props_tDBInput_4.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    java.util.List<Object> tDBInput_4_trimTable_trim = new java.util.ArrayList<Object>();
 		                    
 		                                tDBInput_4_trimTable_trim.add(false);
 		                                
 		                                tDBInput_4_trimTable_trim.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_4.trimTable).setValue("trim",tDBInput_4_trimTable_trim);
 		                    
 		                    java.util.List<Object> tDBInput_4_trimTable_columnName = new java.util.ArrayList<Object>();
 		                    
 		                            tDBInput_4_trimTable_columnName.add("Profile_ID");
 		                            
 		                            tDBInput_4_trimTable_columnName.add("Profile_Name");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_4.trimTable).setValue("columnName",tDBInput_4_trimTable_columnName);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBInput_4.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBInput_4 = props_tDBInput_4.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBInput_4 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBInput_4 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBInput_4 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBInput_4.referencedComponent.setReference(referencedComponentProperties_tDBInput_4);
        }
    }
globalMap.put("tDBInput_4_COMPONENT_RUNTIME_PROPERTIES", props_tDBInput_4);

java.net.URL mappings_url_tDBInput_4= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBInput_4_MAPPINGS_URL", mappings_url_tDBInput_4);

org.talend.components.api.container.RuntimeContainer container_tDBInput_4 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBInput_4";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBInput_4 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBInput_4 = null;
topology_tDBInput_4 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBInput_4 = def_tDBInput_4.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBInput_4, topology_tDBInput_4);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBInput_4 = def_tDBInput_4.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBInput_4 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBInput_4.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBInput_4 = componentRuntime_tDBInput_4.initialize(container_tDBInput_4, props_tDBInput_4);

if (initVr_tDBInput_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBInput_4.getMessage());
}

if(componentRuntime_tDBInput_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBInput_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBInput_4;
	compDriverInitialization_tDBInput_4.runAtDriver(container_tDBInput_4);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBInput_4 = null;
if(componentRuntime_tDBInput_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBInput_4 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBInput_4;
	org.talend.daikon.properties.ValidationResult vr_tDBInput_4 = sourceOrSink_tDBInput_4.validate(container_tDBInput_4);
	if (vr_tDBInput_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBInput_4.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tDBInput_4 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tDBInput_4;
    org.talend.components.api.component.runtime.Reader reader_tDBInput_4 =
            source_tDBInput_4.createReader(container_tDBInput_4);
	reader_tDBInput_4 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tDBInput_4, container_tDBInput_4);

        boolean multi_output_is_allowed_tDBInput_4 = false;
        org.talend.components.api.component.Connector c_tDBInput_4 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tDBInput_4.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tDBInput_4 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tDBInput_4 = true;
            }
        }
        org.apache.avro.Schema schema_tDBInput_4 = props_tDBInput_4.getSchema(c_tDBInput_4, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBInput_4 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tDBInput_4, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBInput_4 = null;

    // Iterate through the incoming data.
    boolean available_tDBInput_4 = reader_tDBInput_4.start();

    resourceMap.put("reader_tDBInput_4", reader_tDBInput_4);

    for (; available_tDBInput_4; available_tDBInput_4 = reader_tDBInput_4.advance()) {
    	nb_line_tDBInput_4++;

    	
        if (multi_output_is_allowed_tDBInput_4) {
                row7 = null;

        }

        try {
            Object data_tDBInput_4 = reader_tDBInput_4.getCurrent();

                if(multi_output_is_allowed_tDBInput_4) {
                    row7 = new row7Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tDBInput_4 == null) {
            factory_tDBInput_4 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tDBInput_4.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tDBInput_4.setWrapped(factory_tDBInput_4.convertToAvro(data_tDBInput_4));
                Object columnValue_0_tDBInput_4 = outgoingEnforcer_tDBInput_4.get(0);
                        row7.Profile_ID = (String) (columnValue_0_tDBInput_4);
                Object columnValue_1_tDBInput_4 = outgoingEnforcer_tDBInput_4.get(1);
                        row7.Profile_Name = (String) (columnValue_1_tDBInput_4);
        } catch (org.talend.components.api.exception.DataRejectException e_tDBInput_4) {
        	java.util.Map<String,Object> info_tDBInput_4 = e_tDBInput_4.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tDBInput_4 = null;
            	if(info_tDBInput_4.containsKey("error")){
            		errorMessage_tDBInput_4 = info_tDBInput_4.get("error");
        		}else if(info_tDBInput_4.containsKey("errorMessage")){
            		errorMessage_tDBInput_4 = info_tDBInput_4.get("errorMessage");
        		}else{
        			errorMessage_tDBInput_4 = "Rejected but error message missing";
        		}
        		errorMessage_tDBInput_4 = "Row "+ nb_line_tDBInput_4 + ": "+errorMessage_tDBInput_4;
    			System.err.println(errorMessage_tDBInput_4);
            	// If the record is reject, the main line record should put NULL
            	row7 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tDBInput_4 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBInput_4 = null;


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	


 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	


 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.Profile_ID = row7.Profile_ID;
				
				row7_HashRow.Profile_Name = row7.Profile_Name;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	


 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	
// end of generic


resourceMap.put("finish_tDBInput_4", Boolean.TRUE);

    } // while
    reader_tDBInput_4.close();
    final java.util.Map<String, Object> resultMap_tDBInput_4 = reader_tDBInput_4.getReturnValues();
if(resultMap_tDBInput_4!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBInput_4 : resultMap_tDBInput_4.entrySet()) {
		switch(entry_tDBInput_4.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBInput_4.setComponentData("tDBInput_4", "ERROR_MESSAGE", entry_tDBInput_4.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBInput_4.setComponentData("tDBInput_4", "NB_LINE", entry_tDBInput_4.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBInput_4.setComponentData("tDBInput_4", "NB_SUCCESS", entry_tDBInput_4.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBInput_4.setComponentData("tDBInput_4", "NB_REJECT", entry_tDBInput_4.getValue());
			break;
		default :
            StringBuilder studio_key_tDBInput_4 = new StringBuilder();
            for (int i_tDBInput_4 = 0; i_tDBInput_4 < entry_tDBInput_4.getKey().length(); i_tDBInput_4++) {
                char ch_tDBInput_4 = entry_tDBInput_4.getKey().charAt(i_tDBInput_4);
                if(Character.isUpperCase(ch_tDBInput_4) && i_tDBInput_4> 0) {
                	studio_key_tDBInput_4.append('_');
                }
                studio_key_tDBInput_4.append(ch_tDBInput_4);
            }
			container_tDBInput_4.setComponentData("tDBInput_4", studio_key_tDBInput_4.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBInput_4.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	
// finally of generic


if(resourceMap.get("finish_tDBInput_4")==null){
    if(resourceMap.get("reader_tDBInput_4")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tDBInput_4")).close();
		} catch (java.io.IOException e_tDBInput_4) {
			String errorMessage_tDBInput_4 = "failed to release the resource in tDBInput_4 :" + e_tDBInput_4.getMessage();
			System.err.println(errorMessage_tDBInput_4);
		}
	}
}
 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ST_Translation_Name;

				public String getST_Translation_Name () {
					return this.ST_Translation_Name;
				}
				
			    public String ST_Translation;

				public String getST_Translation () {
					return this.ST_Translation;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ST_Translation_Name == null) ? 0 : this.ST_Translation_Name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.ST_Translation_Name == null) {
							if (other.ST_Translation_Name != null)
								return false;
						
						} else if (!this.ST_Translation_Name.equals(other.ST_Translation_Name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ST_Translation_Name = this.ST_Translation_Name;
	            other.ST_Translation = this.ST_Translation;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.ST_Translation_Name = this.ST_Translation_Name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.ST_Translation_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ST_Translation_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ST_Translation = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ST_Translation, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ST_Translation_Name="+ST_Translation_Name);
		sb.append(",ST_Translation="+ST_Translation);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ST_Translation_Name, other.ST_Translation_Name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row8 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row8().limitLog4jByte();

			   		// connection name:row8
			   		// source node:tDBInput_5 - inputs:(after_tHashInput_2) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row7,row8,row9) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
    	class BytesLimit65535_tDBInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_5().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBInput_5 =
        new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tDBInput_5 =
        (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tDBInput_5.createRuntimeProperties();
 		                    props_tDBInput_5.setValue("sql",
 		                    "Select ST_Translation_Name,ST_Translation FROM SRC.SEC_Translation");
 		                    
 		                    props_tDBInput_5.setValue("useCursor",
 		                    false);
 		                    
 		                    props_tDBInput_5.setValue("trimStringOrCharColumns",
 		                    false);
 		                    
 		                    props_tDBInput_5.setValue("enableDBMapping",
 		                    false);
 		                    
 		                    props_tDBInput_5.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBInput_5.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBInput_5.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBInput_5.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBInput_5.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MAIN\",\"fields\":[{\"name\":\"ST_Translation_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ST_Translation_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ST_Translation_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ST_Translation\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ST_Translation\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ST_Translation\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}"));
 		                    
 		                    props_tDBInput_5.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    java.util.List<Object> tDBInput_5_trimTable_trim = new java.util.ArrayList<Object>();
 		                    
 		                                tDBInput_5_trimTable_trim.add(false);
 		                                
 		                                tDBInput_5_trimTable_trim.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_5.trimTable).setValue("trim",tDBInput_5_trimTable_trim);
 		                    
 		                    java.util.List<Object> tDBInput_5_trimTable_columnName = new java.util.ArrayList<Object>();
 		                    
 		                            tDBInput_5_trimTable_columnName.add("ST_Translation_Name");
 		                            
 		                            tDBInput_5_trimTable_columnName.add("ST_Translation");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_5.trimTable).setValue("columnName",tDBInput_5_trimTable_columnName);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBInput_5.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBInput_5 = props_tDBInput_5.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBInput_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBInput_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBInput_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBInput_5.referencedComponent.setReference(referencedComponentProperties_tDBInput_5);
        }
    }
globalMap.put("tDBInput_5_COMPONENT_RUNTIME_PROPERTIES", props_tDBInput_5);

java.net.URL mappings_url_tDBInput_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBInput_5_MAPPINGS_URL", mappings_url_tDBInput_5);

org.talend.components.api.container.RuntimeContainer container_tDBInput_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBInput_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBInput_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBInput_5 = null;
topology_tDBInput_5 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBInput_5 = def_tDBInput_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBInput_5, topology_tDBInput_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBInput_5 = def_tDBInput_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBInput_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBInput_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBInput_5 = componentRuntime_tDBInput_5.initialize(container_tDBInput_5, props_tDBInput_5);

if (initVr_tDBInput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBInput_5.getMessage());
}

if(componentRuntime_tDBInput_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBInput_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBInput_5;
	compDriverInitialization_tDBInput_5.runAtDriver(container_tDBInput_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBInput_5 = null;
if(componentRuntime_tDBInput_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBInput_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBInput_5;
	org.talend.daikon.properties.ValidationResult vr_tDBInput_5 = sourceOrSink_tDBInput_5.validate(container_tDBInput_5);
	if (vr_tDBInput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBInput_5.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tDBInput_5 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tDBInput_5;
    org.talend.components.api.component.runtime.Reader reader_tDBInput_5 =
            source_tDBInput_5.createReader(container_tDBInput_5);
	reader_tDBInput_5 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tDBInput_5, container_tDBInput_5);

        boolean multi_output_is_allowed_tDBInput_5 = false;
        org.talend.components.api.component.Connector c_tDBInput_5 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tDBInput_5.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tDBInput_5 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tDBInput_5 = true;
            }
        }
        org.apache.avro.Schema schema_tDBInput_5 = props_tDBInput_5.getSchema(c_tDBInput_5, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBInput_5 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tDBInput_5, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBInput_5 = null;

    // Iterate through the incoming data.
    boolean available_tDBInput_5 = reader_tDBInput_5.start();

    resourceMap.put("reader_tDBInput_5", reader_tDBInput_5);

    for (; available_tDBInput_5; available_tDBInput_5 = reader_tDBInput_5.advance()) {
    	nb_line_tDBInput_5++;

    	
        if (multi_output_is_allowed_tDBInput_5) {
                row8 = null;

        }

        try {
            Object data_tDBInput_5 = reader_tDBInput_5.getCurrent();

                if(multi_output_is_allowed_tDBInput_5) {
                    row8 = new row8Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tDBInput_5 == null) {
            factory_tDBInput_5 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tDBInput_5.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tDBInput_5.setWrapped(factory_tDBInput_5.convertToAvro(data_tDBInput_5));
                Object columnValue_0_tDBInput_5 = outgoingEnforcer_tDBInput_5.get(0);
                        row8.ST_Translation_Name = (String) (columnValue_0_tDBInput_5);
                Object columnValue_1_tDBInput_5 = outgoingEnforcer_tDBInput_5.get(1);
                        row8.ST_Translation = (String) (columnValue_1_tDBInput_5);
        } catch (org.talend.components.api.exception.DataRejectException e_tDBInput_5) {
        	java.util.Map<String,Object> info_tDBInput_5 = e_tDBInput_5.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tDBInput_5 = null;
            	if(info_tDBInput_5.containsKey("error")){
            		errorMessage_tDBInput_5 = info_tDBInput_5.get("error");
        		}else if(info_tDBInput_5.containsKey("errorMessage")){
            		errorMessage_tDBInput_5 = info_tDBInput_5.get("errorMessage");
        		}else{
        			errorMessage_tDBInput_5 = "Rejected but error message missing";
        		}
        		errorMessage_tDBInput_5 = "Row "+ nb_line_tDBInput_5 + ": "+errorMessage_tDBInput_5;
    			System.err.println(errorMessage_tDBInput_5);
            	// If the record is reject, the main line record should put NULL
            	row8 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tDBInput_5 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBInput_5 = null;


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	


 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	


 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.ST_Translation_Name = row8.ST_Translation_Name;
				
				row8_HashRow.ST_Translation = row8.ST_Translation;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	


 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	
// end of generic


resourceMap.put("finish_tDBInput_5", Boolean.TRUE);

    } // while
    reader_tDBInput_5.close();
    final java.util.Map<String, Object> resultMap_tDBInput_5 = reader_tDBInput_5.getReturnValues();
if(resultMap_tDBInput_5!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBInput_5 : resultMap_tDBInput_5.entrySet()) {
		switch(entry_tDBInput_5.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBInput_5.setComponentData("tDBInput_5", "ERROR_MESSAGE", entry_tDBInput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBInput_5.setComponentData("tDBInput_5", "NB_LINE", entry_tDBInput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBInput_5.setComponentData("tDBInput_5", "NB_SUCCESS", entry_tDBInput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBInput_5.setComponentData("tDBInput_5", "NB_REJECT", entry_tDBInput_5.getValue());
			break;
		default :
            StringBuilder studio_key_tDBInput_5 = new StringBuilder();
            for (int i_tDBInput_5 = 0; i_tDBInput_5 < entry_tDBInput_5.getKey().length(); i_tDBInput_5++) {
                char ch_tDBInput_5 = entry_tDBInput_5.getKey().charAt(i_tDBInput_5);
                if(Character.isUpperCase(ch_tDBInput_5) && i_tDBInput_5> 0) {
                	studio_key_tDBInput_5.append('_');
                }
                studio_key_tDBInput_5.append(ch_tDBInput_5);
            }
			container_tDBInput_5.setComponentData("tDBInput_5", studio_key_tDBInput_5.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBInput_5.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	
// finally of generic


if(resourceMap.get("finish_tDBInput_5")==null){
    if(resourceMap.get("reader_tDBInput_5")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tDBInput_5")).close();
		} catch (java.io.IOException e_tDBInput_5) {
			String errorMessage_tDBInput_5 = "failed to release the resource in tDBInput_5 :" + e_tDBInput_5.getMessage();
			System.err.println(errorMessage_tDBInput_5);
		}
	}
}
 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ST_Translation_Name;

				public String getST_Translation_Name () {
					return this.ST_Translation_Name;
				}
				
			    public String ST_Translation;

				public String getST_Translation () {
					return this.ST_Translation;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ST_Translation_Name == null) ? 0 : this.ST_Translation_Name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.ST_Translation_Name == null) {
							if (other.ST_Translation_Name != null)
								return false;
						
						} else if (!this.ST_Translation_Name.equals(other.ST_Translation_Name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ST_Translation_Name = this.ST_Translation_Name;
	            other.ST_Translation = this.ST_Translation;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.ST_Translation_Name = this.ST_Translation_Name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.ST_Translation_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ST_Translation_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ST_Translation = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ST_Translation, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ST_Translation_Name="+ST_Translation_Name);
		sb.append(",ST_Translation="+ST_Translation);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ST_Translation_Name, other.ST_Translation_Name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row9 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row9().limitLog4jByte();

			   		// connection name:row9
			   		// source node:tDBInput_6 - inputs:(after_tHashInput_2) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row7,row8,row9) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
    	class BytesLimit65535_tDBInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_6().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBInput_6 =
        new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tDBInput_6 =
        (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tDBInput_6.createRuntimeProperties();
 		                    props_tDBInput_6.setValue("sql",
 		                    "Select ST_Translation_Name,ST_Translation FROM SRC.SEC_Translation");
 		                    
 		                    props_tDBInput_6.setValue("useCursor",
 		                    false);
 		                    
 		                    props_tDBInput_6.setValue("trimStringOrCharColumns",
 		                    false);
 		                    
 		                    props_tDBInput_6.setValue("enableDBMapping",
 		                    false);
 		                    
 		                    props_tDBInput_6.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBInput_6.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBInput_6.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBInput_6.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBInput_6.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MAIN\",\"fields\":[{\"name\":\"ST_Translation_Name\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ST_Translation_Name\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ST_Translation_Name\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ST_Translation\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ST_Translation\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ST_Translation\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}"));
 		                    
 		                    props_tDBInput_6.tableSelection.setValue("tablename",
 		                    "");
 		                    
 		                    java.util.List<Object> tDBInput_6_trimTable_trim = new java.util.ArrayList<Object>();
 		                    
 		                                tDBInput_6_trimTable_trim.add(false);
 		                                
 		                                tDBInput_6_trimTable_trim.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_6.trimTable).setValue("trim",tDBInput_6_trimTable_trim);
 		                    
 		                    java.util.List<Object> tDBInput_6_trimTable_columnName = new java.util.ArrayList<Object>();
 		                    
 		                            tDBInput_6_trimTable_columnName.add("ST_Translation_Name");
 		                            
 		                            tDBInput_6_trimTable_columnName.add("ST_Translation");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBInput_6.trimTable).setValue("columnName",tDBInput_6_trimTable_columnName);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBInput_6.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBInput_6 = props_tDBInput_6.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBInput_6 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBInput_6 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBInput_6 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBInput_6.referencedComponent.setReference(referencedComponentProperties_tDBInput_6);
        }
    }
globalMap.put("tDBInput_6_COMPONENT_RUNTIME_PROPERTIES", props_tDBInput_6);

java.net.URL mappings_url_tDBInput_6= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBInput_6_MAPPINGS_URL", mappings_url_tDBInput_6);

org.talend.components.api.container.RuntimeContainer container_tDBInput_6 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBInput_6";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBInput_6 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBInput_6 = null;
topology_tDBInput_6 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBInput_6 = def_tDBInput_6.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBInput_6, topology_tDBInput_6);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBInput_6 = def_tDBInput_6.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBInput_6 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBInput_6.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBInput_6 = componentRuntime_tDBInput_6.initialize(container_tDBInput_6, props_tDBInput_6);

if (initVr_tDBInput_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBInput_6.getMessage());
}

if(componentRuntime_tDBInput_6 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBInput_6 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBInput_6;
	compDriverInitialization_tDBInput_6.runAtDriver(container_tDBInput_6);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBInput_6 = null;
if(componentRuntime_tDBInput_6 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBInput_6 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBInput_6;
	org.talend.daikon.properties.ValidationResult vr_tDBInput_6 = sourceOrSink_tDBInput_6.validate(container_tDBInput_6);
	if (vr_tDBInput_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBInput_6.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tDBInput_6 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tDBInput_6;
    org.talend.components.api.component.runtime.Reader reader_tDBInput_6 =
            source_tDBInput_6.createReader(container_tDBInput_6);
	reader_tDBInput_6 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tDBInput_6, container_tDBInput_6);

        boolean multi_output_is_allowed_tDBInput_6 = false;
        org.talend.components.api.component.Connector c_tDBInput_6 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tDBInput_6.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tDBInput_6 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tDBInput_6 = true;
            }
        }
        org.apache.avro.Schema schema_tDBInput_6 = props_tDBInput_6.getSchema(c_tDBInput_6, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tDBInput_6 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tDBInput_6, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tDBInput_6 = null;

    // Iterate through the incoming data.
    boolean available_tDBInput_6 = reader_tDBInput_6.start();

    resourceMap.put("reader_tDBInput_6", reader_tDBInput_6);

    for (; available_tDBInput_6; available_tDBInput_6 = reader_tDBInput_6.advance()) {
    	nb_line_tDBInput_6++;

    	
        if (multi_output_is_allowed_tDBInput_6) {
                row9 = null;

        }

        try {
            Object data_tDBInput_6 = reader_tDBInput_6.getCurrent();

                if(multi_output_is_allowed_tDBInput_6) {
                    row9 = new row9Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tDBInput_6 == null) {
            factory_tDBInput_6 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tDBInput_6.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tDBInput_6.setWrapped(factory_tDBInput_6.convertToAvro(data_tDBInput_6));
                Object columnValue_0_tDBInput_6 = outgoingEnforcer_tDBInput_6.get(0);
                        row9.ST_Translation_Name = (String) (columnValue_0_tDBInput_6);
                Object columnValue_1_tDBInput_6 = outgoingEnforcer_tDBInput_6.get(1);
                        row9.ST_Translation = (String) (columnValue_1_tDBInput_6);
        } catch (org.talend.components.api.exception.DataRejectException e_tDBInput_6) {
        	java.util.Map<String,Object> info_tDBInput_6 = e_tDBInput_6.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tDBInput_6 = null;
            	if(info_tDBInput_6.containsKey("error")){
            		errorMessage_tDBInput_6 = info_tDBInput_6.get("error");
        		}else if(info_tDBInput_6.containsKey("errorMessage")){
            		errorMessage_tDBInput_6 = info_tDBInput_6.get("errorMessage");
        		}else{
        			errorMessage_tDBInput_6 = "Rejected but error message missing";
        		}
        		errorMessage_tDBInput_6 = "Row "+ nb_line_tDBInput_6 + ": "+errorMessage_tDBInput_6;
    			System.err.println(errorMessage_tDBInput_6);
            	// If the record is reject, the main line record should put NULL
            	row9 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tDBInput_6 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBInput_6 = null;


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	


 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	


 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.ST_Translation_Name = row9.ST_Translation_Name;
				
				row9_HashRow.ST_Translation = row9.ST_Translation;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	


 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	
// end of generic


resourceMap.put("finish_tDBInput_6", Boolean.TRUE);

    } // while
    reader_tDBInput_6.close();
    final java.util.Map<String, Object> resultMap_tDBInput_6 = reader_tDBInput_6.getReturnValues();
if(resultMap_tDBInput_6!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBInput_6 : resultMap_tDBInput_6.entrySet()) {
		switch(entry_tDBInput_6.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBInput_6.setComponentData("tDBInput_6", "ERROR_MESSAGE", entry_tDBInput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBInput_6.setComponentData("tDBInput_6", "NB_LINE", entry_tDBInput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBInput_6.setComponentData("tDBInput_6", "NB_SUCCESS", entry_tDBInput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBInput_6.setComponentData("tDBInput_6", "NB_REJECT", entry_tDBInput_6.getValue());
			break;
		default :
            StringBuilder studio_key_tDBInput_6 = new StringBuilder();
            for (int i_tDBInput_6 = 0; i_tDBInput_6 < entry_tDBInput_6.getKey().length(); i_tDBInput_6++) {
                char ch_tDBInput_6 = entry_tDBInput_6.getKey().charAt(i_tDBInput_6);
                if(Character.isUpperCase(ch_tDBInput_6) && i_tDBInput_6> 0) {
                	studio_key_tDBInput_6.append('_');
                }
                studio_key_tDBInput_6.append(ch_tDBInput_6);
            }
			container_tDBInput_6.setComponentData("tDBInput_6", studio_key_tDBInput_6.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBInput_6.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	
// finally of generic


if(resourceMap.get("finish_tDBInput_6")==null){
    if(resourceMap.get("reader_tDBInput_6")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tDBInput_6")).close();
		} catch (java.io.IOException e_tDBInput_6) {
			String errorMessage_tDBInput_6 = "failed to release the resource in tDBInput_6 :" + e_tDBInput_6.getMessage();
			System.err.println(errorMessage_tDBInput_6);
		}
	}
}
 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public java.util.Date TimeStamp;

				public java.util.Date getTimeStamp () {
					return this.TimeStamp;
				}
				
			    public String JobName;

				public String getJobName () {
					return this.JobName;
				}
				
			    public String ErrorType;

				public String getErrorType () {
					return this.ErrorType;
				}
				
			    public String ErrorSource;

				public String getErrorSource () {
					return this.ErrorSource;
				}
				
			    public String ErrorMessage;

				public String getErrorMessage () {
					return this.ErrorMessage;
				}
				
			    public Integer ErrorCode;

				public Integer getErrorCode () {
					return this.ErrorCode;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.TimeStamp = readDate(dis);
					
					this.JobName = readString(dis);
					
					this.ErrorType = readString(dis);
					
					this.ErrorSource = readString(dis);
					
					this.ErrorMessage = readString(dis);
					
						this.ErrorCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.TimeStamp,dos);
					
					// String
				
						writeString(this.JobName,dos);
					
					// String
				
						writeString(this.ErrorType,dos);
					
					// String
				
						writeString(this.ErrorSource,dos);
					
					// String
				
						writeString(this.ErrorMessage,dos);
					
					// Integer
				
						writeInteger(this.ErrorCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TimeStamp="+String.valueOf(TimeStamp));
		sb.append(",JobName="+JobName);
		sb.append(",ErrorType="+ErrorType);
		sb.append(",ErrorSource="+ErrorSource);
		sb.append(",ErrorMessage="+ErrorMessage);
		sb.append(",ErrorCode="+String.valueOf(ErrorCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public java.util.Date TimeStamp;

				public java.util.Date getTimeStamp () {
					return this.TimeStamp;
				}
				
			    public String JobName;

				public String getJobName () {
					return this.JobName;
				}
				
			    public String ErrorType;

				public String getErrorType () {
					return this.ErrorType;
				}
				
			    public String ErrorSource;

				public String getErrorSource () {
					return this.ErrorSource;
				}
				
			    public String ErrorMessage;

				public String getErrorMessage () {
					return this.ErrorMessage;
				}
				
			    public Integer ErrorCode;

				public Integer getErrorCode () {
					return this.ErrorCode;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.TimeStamp = readDate(dis);
					
					this.JobName = readString(dis);
					
					this.ErrorType = readString(dis);
					
					this.ErrorSource = readString(dis);
					
					this.ErrorMessage = readString(dis);
					
						this.ErrorCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.TimeStamp,dos);
					
					// String
				
						writeString(this.JobName,dos);
					
					// String
				
						writeString(this.ErrorType,dos);
					
					// String
				
						writeString(this.ErrorSource,dos);
					
					// String
				
						writeString(this.ErrorMessage,dos);
					
					// Integer
				
						writeInteger(this.ErrorCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TimeStamp="+String.valueOf(TimeStamp));
		sb.append(",JobName="+JobName);
		sb.append(",ErrorType="+ErrorType);
		sb.append(",ErrorSource="+ErrorSource);
		sb.append(",ErrorMessage="+ErrorMessage);
		sb.append(",ErrorCode="+String.valueOf(ErrorCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Load_Profile_Risk_History, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Load_Profile_Risk_History) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();
row11Struct row11 = new row11Struct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		
    	class BytesLimit65535_tDBOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_2().limitLog4jByte();


org.talend.components.api.component.ComponentDefinition def_tDBOutput_2 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tDBOutput_2 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tDBOutput_2.createRuntimeProperties();
 		                    props_tDBOutput_2.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);
 		                    
 		                    props_tDBOutput_2.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("dieOnError",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("debug",
 		                    false);
 		                    
 		                    props_tDBOutput_2.setValue("useBatch",
 		                    true);
 		                    
 		                    props_tDBOutput_2.setValue("batchSize",
 		                    10000);
 		                    
 		                    props_tDBOutput_2.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tDBOutput_2.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tDBOutput_2.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tDBOutput_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tDBOutput_2.tableSelection.setValue("tablename",
 		                    "STG.Error_Handling");
 		                    
 		                    props_tDBOutput_2.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"tJDBCOutput_1\",\"fields\":[{\"name\":\"TimeStamp\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"TimeStamp\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss\",\"talend.field.length\":\"0\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"TimeStamp\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"JobName\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"JobName\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"JobName\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorType\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorType\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorType\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorSource\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorSource\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorSource\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorMessage\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorMessage\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorMessage\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorCode\",\"type\":[\"int\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ErrorCode\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"3\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorCode\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_1\",\"di.table.label\":\"tJDBCOutput_1\"}"));
 		                    
 		                    props_tDBOutput_2.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"tJDBCOutput_1\",\"fields\":[{\"name\":\"TimeStamp\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"TimeStamp\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss\",\"talend.field.length\":\"0\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"TimeStamp\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"JobName\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"JobName\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"JobName\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorType\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorType\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorType\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorSource\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorSource\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorSource\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorMessage\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorMessage\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorMessage\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorCode\",\"type\":[\"int\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ErrorCode\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"3\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorCode\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_1\",\"di.table.label\":\"tJDBCOutput_1\"}"));
 		                    
 		                    props_tDBOutput_2.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"rejectOutput\",\"fields\":[{\"name\":\"TimeStamp\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"TimeStamp\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss\",\"talend.field.length\":\"0\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"TimeStamp\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"JobName\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"JobName\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"JobName\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorType\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorType\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorType\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorSource\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorSource\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorSource\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorMessage\",\"type\":[\"string\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"ErrorMessage\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorMessage\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"ErrorCode\",\"type\":[\"int\",\"null\"],\"talend.field.dbType\":\"\",\"talend.field.default\":\"\",\"talend.field.dbColumnName\":\"ErrorCode\",\"di.column.talendType\":\"id_Integer\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"3\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"ErrorCode\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tJDBCOutput_1\",\"di.table.label\":\"tJDBCOutput_1\"}"));
 		                    
 		                    props_tDBOutput_2.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tDBOutput_2.additionalColumns.setValue("referenceColumns",
 		                    "TimeStamp");
 		                    
 		                    java.util.List<Object> tDBOutput_2_fieldOptions_schemaColumns = new java.util.ArrayList<Object>();
 		                    
 		                            tDBOutput_2_fieldOptions_schemaColumns.add("TimeStamp");
 		                            
 		                            tDBOutput_2_fieldOptions_schemaColumns.add("JobName");
 		                            
 		                            tDBOutput_2_fieldOptions_schemaColumns.add("ErrorType");
 		                            
 		                            tDBOutput_2_fieldOptions_schemaColumns.add("ErrorSource");
 		                            
 		                            tDBOutput_2_fieldOptions_schemaColumns.add("ErrorMessage");
 		                            
 		                            tDBOutput_2_fieldOptions_schemaColumns.add("ErrorCode");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_2.fieldOptions).setValue("schemaColumns",tDBOutput_2_fieldOptions_schemaColumns);
 		                    
 		                    java.util.List<Object> tDBOutput_2_fieldOptions_updateKey = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_2_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_updateKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_updateKey.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_2.fieldOptions).setValue("updateKey",tDBOutput_2_fieldOptions_updateKey);
 		                    
 		                    java.util.List<Object> tDBOutput_2_fieldOptions_deletionKey = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_2_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_deletionKey.add(false);
 		                                
 		                                tDBOutput_2_fieldOptions_deletionKey.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_2.fieldOptions).setValue("deletionKey",tDBOutput_2_fieldOptions_deletionKey);
 		                    
 		                    java.util.List<Object> tDBOutput_2_fieldOptions_updatable = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_2_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_updatable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_updatable.add(true);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_2.fieldOptions).setValue("updatable",tDBOutput_2_fieldOptions_updatable);
 		                    
 		                    java.util.List<Object> tDBOutput_2_fieldOptions_insertable = new java.util.ArrayList<Object>();
 		                    
 		                                tDBOutput_2_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_insertable.add(true);
 		                                
 		                                tDBOutput_2_fieldOptions_insertable.add(true);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tDBOutput_2.fieldOptions).setValue("insertable",tDBOutput_2_fieldOptions_insertable);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tDBOutput_2.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tDBOutput_2 = props_tDBOutput_2.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tDBOutput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tDBOutput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tDBOutput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tDBOutput_2.referencedComponent.setReference(referencedComponentProperties_tDBOutput_2);
        }
    }
globalMap.put("tDBOutput_2_COMPONENT_RUNTIME_PROPERTIES", props_tDBOutput_2);

java.net.URL mappings_url_tDBOutput_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tDBOutput_2_MAPPINGS_URL", mappings_url_tDBOutput_2);

org.talend.components.api.container.RuntimeContainer container_tDBOutput_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tDBOutput_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tDBOutput_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tDBOutput_2 = null;
topology_tDBOutput_2 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tDBOutput_2 = def_tDBOutput_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tDBOutput_2, topology_tDBOutput_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tDBOutput_2 = def_tDBOutput_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tDBOutput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tDBOutput_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tDBOutput_2 = componentRuntime_tDBOutput_2.initialize(container_tDBOutput_2, props_tDBOutput_2);

if (initVr_tDBOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tDBOutput_2.getMessage());
}

if(componentRuntime_tDBOutput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tDBOutput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tDBOutput_2;
	compDriverInitialization_tDBOutput_2.runAtDriver(container_tDBOutput_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tDBOutput_2 = null;
if(componentRuntime_tDBOutput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tDBOutput_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tDBOutput_2;
	org.talend.daikon.properties.ValidationResult vr_tDBOutput_2 = sourceOrSink_tDBOutput_2.validate(container_tDBOutput_2);
	if (vr_tDBOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tDBOutput_2.getMessage());
	}
}

    org.talend.components.api.component.runtime.Sink sink_tDBOutput_2 =
            (org.talend.components.api.component.runtime.Sink)sourceOrSink_tDBOutput_2;
    org.talend.components.api.component.runtime.WriteOperation writeOperation_tDBOutput_2 = sink_tDBOutput_2.createWriteOperation();
    writeOperation_tDBOutput_2.initialize(container_tDBOutput_2);
    org.talend.components.api.component.runtime.Writer writer_tDBOutput_2 = writeOperation_tDBOutput_2.createWriter(container_tDBOutput_2);
    writer_tDBOutput_2.open("tDBOutput_2");

    resourceMap.put("writer_tDBOutput_2", writer_tDBOutput_2);

    org.talend.components.api.component.Connector c_tDBOutput_2 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tDBOutput_2.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tDBOutput_2 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tDBOutput_2 = props_tDBOutput_2.getSchema(c_tDBOutput_2, false);
    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tDBOutput_2
            = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tDBOutput_2);
                java.lang.Iterable<?> outgoingMainRecordsList_tDBOutput_2 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tDBOutput_2 = null;


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfout1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row10.type = lcm.getType();
		row10.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row10.priority = lcm.getPriority();
		row10.message = lcm.getMessage();
		row10.code = lcm.getCode();
		
		row10.moment = java.util.Calendar.getInstance().getTime();
	
    	row10.pid = pid;
		row10.root_pid = rootPid;
		row10.father_pid = fatherPid;
	
    	row10.project = projectName;
    	row10.job = jobName;
    	row10.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.TimeStamp = row10.moment ;
copyOfout1_tmp.JobName = row10.job ;
copyOfout1_tmp.ErrorType = row10.type ;
copyOfout1_tmp.ErrorSource = row10.origin ;
copyOfout1_tmp.ErrorMessage = row10.message ;
copyOfout1_tmp.ErrorCode = row10.code ;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//copyOfout1
			//copyOfout1


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfout1"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row11.TimeStamp = copyOfout1.TimeStamp;
row11.JobName = copyOfout1.JobName;
row11.ErrorType = copyOfout1.ErrorType;
row11.ErrorSource = copyOfout1.ErrorSource;
row11.ErrorMessage = copyOfout1.ErrorMessage;
row11.ErrorCode = copyOfout1.ErrorCode;
globalMap.put("TimeStamp",copyOfout1.TimeStamp);
globalMap.put("JobName",copyOfout1.JobName);
globalMap.put("ErrorType",copyOfout1.ErrorType);
globalMap.put("ErrorSource",copyOfout1.ErrorSource);
globalMap.put("ErrorMessage",copyOfout1.ErrorMessage);
globalMap.put("ErrorCode",copyOfout1.ErrorCode);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

            incomingEnforcer_tDBOutput_2.createNewRecord();
                    incomingEnforcer_tDBOutput_2.put("TimeStamp", row11.TimeStamp);
                    incomingEnforcer_tDBOutput_2.put("JobName", row11.JobName);
                    incomingEnforcer_tDBOutput_2.put("ErrorType", row11.ErrorType);
                    incomingEnforcer_tDBOutput_2.put("ErrorSource", row11.ErrorSource);
                    incomingEnforcer_tDBOutput_2.put("ErrorMessage", row11.ErrorMessage);
                    incomingEnforcer_tDBOutput_2.put("ErrorCode", row11.ErrorCode);
            org.apache.avro.generic.IndexedRecord data_tDBOutput_2 = incomingEnforcer_tDBOutput_2.getCurrentRecord();
            

            writer_tDBOutput_2.write(data_tDBOutput_2);
            
            nb_line_tDBOutput_2++;

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	


 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	


 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfout1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tSendMail_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
// end of generic


resourceMap.put("finish_tDBOutput_2", Boolean.TRUE);

    org.talend.components.api.component.runtime.Result resultObject_tDBOutput_2 = (org.talend.components.api.component.runtime.Result)writer_tDBOutput_2.close();
    final java.util.Map<String, Object> resultMap_tDBOutput_2 = writer_tDBOutput_2.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tDBOutput_2), container_tDBOutput_2);
if(resultMap_tDBOutput_2!=null) {
	for(java.util.Map.Entry<String,Object> entry_tDBOutput_2 : resultMap_tDBOutput_2.entrySet()) {
		switch(entry_tDBOutput_2.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "ERROR_MESSAGE", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_LINE", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_SUCCESS", entry_tDBOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tDBOutput_2.setComponentData("tDBOutput_2", "NB_REJECT", entry_tDBOutput_2.getValue());
			break;
		default :
            StringBuilder studio_key_tDBOutput_2 = new StringBuilder();
            for (int i_tDBOutput_2 = 0; i_tDBOutput_2 < entry_tDBOutput_2.getKey().length(); i_tDBOutput_2++) {
                char ch_tDBOutput_2 = entry_tDBOutput_2.getKey().charAt(i_tDBOutput_2);
                if(Character.isUpperCase(ch_tDBOutput_2) && i_tDBOutput_2> 0) {
                	studio_key_tDBOutput_2.append('_');
                }
                studio_key_tDBOutput_2.append(ch_tDBOutput_2);
            }
			container_tDBOutput_2.setComponentData("tDBOutput_2", studio_key_tDBOutput_2.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tDBOutput_2.getValue());
			break;
		}
	}
}

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
// finally of generic


if(resourceMap.get("finish_tDBOutput_2")==null){
    if(resourceMap.get("writer_tDBOutput_2")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tDBOutput_2")).close();
		} catch (java.io.IOException e_tDBOutput_2) {
			String errorMessage_tDBOutput_2 = "failed to release the resource in tDBOutput_2 :" + e_tDBOutput_2.getMessage();
			System.err.println(errorMessage_tDBOutput_2);
		}
	}
}
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_1", false);
		start_Hash.put("tSendMail_1", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_1";

	
		int tos_count_tSendMail_1 = 0;
		
    	class BytesLimit65535_tSendMail_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSendMail_1().limitLog4jByte();

 



/**
 * [tSendMail_1 begin ] stop
 */
	
	/**
	 * [tSendMail_1 main ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

	String smtpHost_tSendMail_1 = context.SMTP_MailServer;
        String smtpPort_tSendMail_1 = context.SMTP_Port;
	String from_tSendMail_1 = (context.SMTP_From_Name);
    String to_tSendMail_1 = (context.SMTP_To_Name).replace(";",",");
    String cc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_1 = ("Talend Job Failed on "+StringHandling.UPCASE(StringHandling.CHANGE(context.SF_BI_STAGING_Username,"user",""))+" : "+globalMap.get("JobName"));
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

	String message_tSendMail_1 = (("\n<html>\n<body>\n<p> Hi Team,\n<br>\n<br>Talend Job has failed on <b>"+StringHandling.UPCASE(StringHandling.CHANGE(context.SF_BI_STAGING_Username,"user",""))+"</b>.Below are the Details:</p>\n<table border=\"1\">\n<tr>\n <td>Job Name</td>\n <td>"+globalMap.get("JobName")+"</td>\n</tr>\n<tr>\n <td>Error Source</td>\n <td>"+globalMap.get("ErrorSource")+"</td>\n</tr>\n<tr>\n <td>Error Message</td>\n <td>"+globalMap.get("ErrorMessage")+"</td>\n</tr>\n<tr>\n <td>Error Code</td>\n <td>"+globalMap.get("ErrorCode")+"</td>\n</tr>\n<tr>\n <td>Generated time</td>\n <td>"+globalMap.get("TimeStamp")+"</td>\n</tr>\n</table>\n<p>\n<br> Regards,\n<br> BITeam\n</p>\n</body>\n</html>\n") == null || "".equals("\n<html>\n<body>\n<p> Hi Team,\n<br>\n<br>Talend Job has failed on <b>"+StringHandling.UPCASE(StringHandling.CHANGE(context.SF_BI_STAGING_Username,"user",""))+"</b>.Below are the Details:</p>\n<table border=\"1\">\n<tr>\n <td>Job Name</td>\n <td>"+globalMap.get("JobName")+"</td>\n</tr>\n<tr>\n <td>Error Source</td>\n <td>"+globalMap.get("ErrorSource")+"</td>\n</tr>\n<tr>\n <td>Error Message</td>\n <td>"+globalMap.get("ErrorMessage")+"</td>\n</tr>\n<tr>\n <td>Error Code</td>\n <td>"+globalMap.get("ErrorCode")+"</td>\n</tr>\n<tr>\n <td>Generated time</td>\n <td>"+globalMap.get("TimeStamp")+"</td>\n</tr>\n</table>\n<p>\n<br> Regards,\n<br> BITeam\n</p>\n</body>\n</html>\n")) ? "\"\"" : ("\n<html>\n<body>\n<p> Hi Team,\n<br>\n<br>Talend Job has failed on <b>"+StringHandling.UPCASE(StringHandling.CHANGE(context.SF_BI_STAGING_Username,"user",""))+"</b>.Below are the Details:</p>\n<table border=\"1\">\n<tr>\n <td>Job Name</td>\n <td>"+globalMap.get("JobName")+"</td>\n</tr>\n<tr>\n <td>Error Source</td>\n <td>"+globalMap.get("ErrorSource")+"</td>\n</tr>\n<tr>\n <td>Error Message</td>\n <td>"+globalMap.get("ErrorMessage")+"</td>\n</tr>\n<tr>\n <td>Error Code</td>\n <td>"+globalMap.get("ErrorCode")+"</td>\n</tr>\n<tr>\n <td>Generated time</td>\n <td>"+globalMap.get("TimeStamp")+"</td>\n</tr>\n</table>\n<p>\n<br> Regards,\n<br> BITeam\n</p>\n</body>\n</html>\n") ;
	java.util.Properties props_tSendMail_1 = System.getProperties();     
	props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
	props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
		props_tSendMail_1.put("mail.mime.encodefilename", "true");
		props_tSendMail_1.put("mail.smtp.starttls.enable","true");     
	try {
		
		
			props_tSendMail_1.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_1 = MyEncryption.decrypt(context.SMTP_Password); 
				
				
				return new javax.mail.PasswordAuthentication(context.SMTP_Username, decryptedPassword_tSendMail_1); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
		msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, null));
		msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
		if (cc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
		if (bcc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
		msg_tSendMail_1.setSubject(subject_tSendMail_1);

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
			java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
			msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));    
		}  
		msg_tSendMail_1.setSentDate(new Date());
		msg_tSendMail_1.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_1.setText(message_tSendMail_1,"ISO-8859-15", "html");
		mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++){
			String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
			javax.activation.FileDataSource fds_tSendMail_1 = null;
			java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);
			
    		if (file_tSendMail_1.isDirectory()){
				java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
				for(java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1){
					if (subFile_tSendMail_1.isFile()){
						fds_tSendMail_1 = new javax.activation.FileDataSource(subFile_tSendMail_1.getAbsolutePath());
						mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
						mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
						if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
					}
				}
    		}else{
				mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
				mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1)); 
				mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
				if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
			}
		}
		// -- set the content --
		msg_tSendMail_1.setContent(mp_tSendMail_1);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_1 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_1.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_1.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_1);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_1.remove("mail.smtp.host");
		props_tSendMail_1.remove("mail.smtp.port");
		
		props_tSendMail_1.remove("mail.mime.encodefilename");
		
			props_tSendMail_1.remove("mail.smtp.starttls.enable");
		
		props_tSendMail_1.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_1++;

/**
 * [tSendMail_1 main ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_1 end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

ok_Hash.put("tSendMail_1", true);
end_Hash.put("tSendMail_1", System.currentTimeMillis());




/**
 * [tSendMail_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_1 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final Load_Profile_Risk_History Load_Profile_Risk_HistoryClass = new Load_Profile_Risk_History();

        int exitCode = Load_Profile_Risk_HistoryClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Load_Profile_Risk_History.class.getClassLoader().getResourceAsStream("local_project/load_profile_risk_history_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Load_Profile_Risk_History.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("SF_BI_DW_DatabaseName", "id_String");
				
                context.SF_BI_DW_DatabaseName=(String) context.getProperty("SF_BI_DW_DatabaseName");
				    context.setContextType("SF_BI_DW_DriverClass", "id_String");
				
                context.SF_BI_DW_DriverClass=(String) context.getProperty("SF_BI_DW_DriverClass");
				    context.setContextType("SF_BI_DW_JDBCUrl", "id_String");
				
                context.SF_BI_DW_JDBCUrl=(String) context.getProperty("SF_BI_DW_JDBCUrl");
				    context.setContextType("SF_BI_DW_Password", "id_Password");
				
            		String pwd_SF_BI_DW_Password_value = context.getProperty("SF_BI_DW_Password");
            		context.SF_BI_DW_Password = null;
            		if(pwd_SF_BI_DW_Password_value!=null) {
            			if(context_param.containsKey("SF_BI_DW_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.SF_BI_DW_Password = pwd_SF_BI_DW_Password_value;
            			} else if (!pwd_SF_BI_DW_Password_value.isEmpty()) {
            				try {
            					context.SF_BI_DW_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SF_BI_DW_Password_value);
            					context.put("SF_BI_DW_Password",context.SF_BI_DW_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("SF_BI_DW_Username", "id_String");
				
                context.SF_BI_DW_Username=(String) context.getProperty("SF_BI_DW_Username");
				    context.setContextType("SF_BI_STAGING_DatabaseName", "id_String");
				
                context.SF_BI_STAGING_DatabaseName=(String) context.getProperty("SF_BI_STAGING_DatabaseName");
				    context.setContextType("SF_BI_STAGING_DriverClass", "id_String");
				
                context.SF_BI_STAGING_DriverClass=(String) context.getProperty("SF_BI_STAGING_DriverClass");
				    context.setContextType("SF_BI_STAGING_JDBCUrl", "id_String");
				
                context.SF_BI_STAGING_JDBCUrl=(String) context.getProperty("SF_BI_STAGING_JDBCUrl");
				    context.setContextType("SF_BI_STAGING_Password", "id_Password");
				
            		String pwd_SF_BI_STAGING_Password_value = context.getProperty("SF_BI_STAGING_Password");
            		context.SF_BI_STAGING_Password = null;
            		if(pwd_SF_BI_STAGING_Password_value!=null) {
            			if(context_param.containsKey("SF_BI_STAGING_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.SF_BI_STAGING_Password = pwd_SF_BI_STAGING_Password_value;
            			} else if (!pwd_SF_BI_STAGING_Password_value.isEmpty()) {
            				try {
            					context.SF_BI_STAGING_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SF_BI_STAGING_Password_value);
            					context.put("SF_BI_STAGING_Password",context.SF_BI_STAGING_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("SF_BI_STAGING_Username", "id_String");
				
                context.SF_BI_STAGING_Username=(String) context.getProperty("SF_BI_STAGING_Username");
				    context.setContextType("SMTP_Port", "id_String");
				
                context.SMTP_Port=(String) context.getProperty("SMTP_Port");
				    context.setContextType("SMTP_MailServer", "id_String");
				
                context.SMTP_MailServer=(String) context.getProperty("SMTP_MailServer");
				    context.setContextType("SMTP_From_Name", "id_String");
				
                context.SMTP_From_Name=(String) context.getProperty("SMTP_From_Name");
				    context.setContextType("SMTP_To_Name", "id_String");
				
                context.SMTP_To_Name=(String) context.getProperty("SMTP_To_Name");
				    context.setContextType("SMTP_Password", "id_Password");
				
            		String pwd_SMTP_Password_value = context.getProperty("SMTP_Password");
            		context.SMTP_Password = null;
            		if(pwd_SMTP_Password_value!=null) {
            			if(context_param.containsKey("SMTP_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.SMTP_Password = pwd_SMTP_Password_value;
            			} else if (!pwd_SMTP_Password_value.isEmpty()) {
            				try {
            					context.SMTP_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SMTP_Password_value);
            					context.put("SMTP_Password",context.SMTP_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("SMTP_Username", "id_String");
				
                context.SMTP_Username=(String) context.getProperty("SMTP_Username");
				    context.setContextType("Cassandra_Password", "id_Password");
				
            		String pwd_Cassandra_Password_value = context.getProperty("Cassandra_Password");
            		context.Cassandra_Password = null;
            		if(pwd_Cassandra_Password_value!=null) {
            			if(context_param.containsKey("Cassandra_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Cassandra_Password = pwd_Cassandra_Password_value;
            			} else if (!pwd_Cassandra_Password_value.isEmpty()) {
            				try {
            					context.Cassandra_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Cassandra_Password_value);
            					context.put("Cassandra_Password",context.Cassandra_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Cassandra_Port", "id_Integer");
				
             try{
                 context.Cassandra_Port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("Cassandra_Port"));
             }catch(NumberFormatException e){
                 context.Cassandra_Port=null;
              }
				    context.setContextType("Cassandra_Host", "id_String");
				
                context.Cassandra_Host=(String) context.getProperty("Cassandra_Host");
				    context.setContextType("Cassandra_Username", "id_String");
				
                context.Cassandra_Username=(String) context.getProperty("Cassandra_Username");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("SF_BI_DW_DatabaseName")) {
                context.SF_BI_DW_DatabaseName = (String) parentContextMap.get("SF_BI_DW_DatabaseName");
            }if (parentContextMap.containsKey("SF_BI_DW_DriverClass")) {
                context.SF_BI_DW_DriverClass = (String) parentContextMap.get("SF_BI_DW_DriverClass");
            }if (parentContextMap.containsKey("SF_BI_DW_JDBCUrl")) {
                context.SF_BI_DW_JDBCUrl = (String) parentContextMap.get("SF_BI_DW_JDBCUrl");
            }if (parentContextMap.containsKey("SF_BI_DW_Password")) {
                context.SF_BI_DW_Password = (java.lang.String) parentContextMap.get("SF_BI_DW_Password");
            }if (parentContextMap.containsKey("SF_BI_DW_Username")) {
                context.SF_BI_DW_Username = (String) parentContextMap.get("SF_BI_DW_Username");
            }if (parentContextMap.containsKey("SF_BI_STAGING_DatabaseName")) {
                context.SF_BI_STAGING_DatabaseName = (String) parentContextMap.get("SF_BI_STAGING_DatabaseName");
            }if (parentContextMap.containsKey("SF_BI_STAGING_DriverClass")) {
                context.SF_BI_STAGING_DriverClass = (String) parentContextMap.get("SF_BI_STAGING_DriverClass");
            }if (parentContextMap.containsKey("SF_BI_STAGING_JDBCUrl")) {
                context.SF_BI_STAGING_JDBCUrl = (String) parentContextMap.get("SF_BI_STAGING_JDBCUrl");
            }if (parentContextMap.containsKey("SF_BI_STAGING_Password")) {
                context.SF_BI_STAGING_Password = (java.lang.String) parentContextMap.get("SF_BI_STAGING_Password");
            }if (parentContextMap.containsKey("SF_BI_STAGING_Username")) {
                context.SF_BI_STAGING_Username = (String) parentContextMap.get("SF_BI_STAGING_Username");
            }if (parentContextMap.containsKey("SMTP_Port")) {
                context.SMTP_Port = (String) parentContextMap.get("SMTP_Port");
            }if (parentContextMap.containsKey("SMTP_MailServer")) {
                context.SMTP_MailServer = (String) parentContextMap.get("SMTP_MailServer");
            }if (parentContextMap.containsKey("SMTP_From_Name")) {
                context.SMTP_From_Name = (String) parentContextMap.get("SMTP_From_Name");
            }if (parentContextMap.containsKey("SMTP_To_Name")) {
                context.SMTP_To_Name = (String) parentContextMap.get("SMTP_To_Name");
            }if (parentContextMap.containsKey("SMTP_Password")) {
                context.SMTP_Password = (java.lang.String) parentContextMap.get("SMTP_Password");
            }if (parentContextMap.containsKey("SMTP_Username")) {
                context.SMTP_Username = (String) parentContextMap.get("SMTP_Username");
            }if (parentContextMap.containsKey("Cassandra_Password")) {
                context.Cassandra_Password = (java.lang.String) parentContextMap.get("Cassandra_Password");
            }if (parentContextMap.containsKey("Cassandra_Port")) {
                context.Cassandra_Port = (Integer) parentContextMap.get("Cassandra_Port");
            }if (parentContextMap.containsKey("Cassandra_Host")) {
                context.Cassandra_Host = (String) parentContextMap.get("Cassandra_Host");
            }if (parentContextMap.containsKey("Cassandra_Username")) {
                context.Cassandra_Username = (String) parentContextMap.get("Cassandra_Username");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("SF_BI_DW_Password");
			parametersToEncrypt.add("SF_BI_STAGING_Password");
			parametersToEncrypt.add("SMTP_Password");
			parametersToEncrypt.add("Cassandra_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();



try {
errorCode = null;Implicit_Context_RegexProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_Implicit_Context_Regex) {
globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", -1);

e_Implicit_Context_Regex.printStackTrace();

}

this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tChronometerStart_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tChronometerStart_1) {
globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", -1);

e_tChronometerStart_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Load_Profile_Risk_History");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();
    closeCassandraConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tJDBCConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }

    private void closeCassandraConnections() {
        try {
            Object obj_cluster;
            Object obj_conn;
            obj_cluster = globalMap.remove("cluster_tCassandraConnection_2");
            obj_conn = globalMap.remove("connection_tCassandraConnection_2");
            if(obj_conn != null) {
                ((com.datastax.driver.core.Session) obj_conn).close();
            }
            if(obj_cluster != null) {
                ((com.datastax.driver.core.Cluster) obj_cluster).close();
            }
        } catch (java.lang.Exception e) {
        }
    }










    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tJDBCConnection_1", globalMap.get("conn_tJDBCConnection_1"));
            connections.put("conn_tJDBCConnection_2", globalMap.get("conn_tJDBCConnection_2"));
            connections.put("connection_tCassandraConnection_2", globalMap.get("connection_tCassandraConnection_2"));
            connections.put("cluster_tCassandraConnection_2", globalMap.get("cluster_tCassandraConnection_2"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     591300 characters generated by Talend Open Studio for Big Data 
 *     on the June 27, 2018 12:40:15 PM IST
 ************************************************************************************************/